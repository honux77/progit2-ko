//////////////////////////
=== Packfiles
//////////////////////////
=== Packfile

//////////////////////////
Let's go back to the objects database for your test Git repository.
At this point, you have 11 objects – 4 blobs, 3 trees, 3 commits, and 1 tag:
//////////////////////////
테스트용 Git 저장소의 개체 데이터베이스를 다시 살펴보자.
지금 개체는 모두 11개로 Blob 4개, Tree 3개, 커밋 3개, 태그 1개가 있다.

[source,console]
----
$ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1
----

//////////////////////////
Git compresses the contents of these files with zlib, and you're not storing much, so all these files collectively take up only 925 bytes.
You'll add some larger content to the repository to demonstrate an interesting feature of Git.
To demonstrate, we'll add the `repo.rb` file from the Grit library – this is about a 22K source code file:
//////////////////////////
Git은 zlib으로 파일 내용을 압축하기 때문에 저장 공간이 많이 필요하지 않다. 그래서 이 데이터베이스에 저장된 파일은 겨우 925바이트밖에 되지 않는다.
크기가 큰 파일을 추가해서 이 기능의 효과를 좀 더 살펴보자.
앞 장에서 사용했던 Grit 라이브러리에 들어 있는 `repo.rb` 파일을 추가한다. 이 파일의 크기는 약 22K이다.

[source,console]
----
$ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb
$ git checkout master
$ git add repo.rb
$ git commit -m 'added repo.rb'
[master 484a592] added repo.rb
 3 files changed, 709 insertions(+), 2 deletions(-)
 delete mode 100644 bak/test.txt
 create mode 100644 repo.rb
 rewrite test.txt (100%)
----

//////////////////////////
If you look at the resulting tree, you can see the SHA-1 value your repo.rb file got for the blob object:
//////////////////////////
추가한 Tree 개체를 보면 repo.rb 파일의 SHA-1 값이 무엇인지 확인할 수 있다.

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

//////////////////////////
You can then use `git cat-file` to see how big that object is:
//////////////////////////
`git cat-file` 명령으로 개체의 크기를 아래와 같이 확인한다.

[source,console]
----
$ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5
22044
----

//////////////////////////
Now, modify that file a little, and see what happens:
//////////////////////////
파일을 수정하면 어떻게 되는지 살펴보자.

[source,console]
----
$ echo '# testing' >> repo.rb
$ git commit -am 'modified repo a bit'
[master 2431da6] modified repo.rb a bit
 1 file changed, 1 insertion(+)
----

//////////////////////////
Check the tree created by that commit, and you see something interesting:
//////////////////////////
수정한 커밋의 Tree 개체를 확인하면 흥미로운 점을 발견할 수 있다.

[source,console]
----
$ git cat-file -p master^{tree}
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob b042a60ef7dff760008df33cee372b945b6e884e      repo.rb
100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt
----

//////////////////////////
The blob is now a different blob, which means that although you added only a single line to the end of a 400-line file, Git stored that new content as a completely new object:
//////////////////////////
이 Blob 개체는 다른 개체다. 새 Blob 개체는 400 라인 이후에 한 라인을 더 추가한 새 개체이다. Git은 완전히 새로운 Blob 개체를 만들어 저장한다.

[source,console]
----
$ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e
22054
----

//////////////////////////
You have two nearly identical 22K objects on your disk.
Wouldn't it be nice if Git could store one of them in full but then the second object only as the delta between it and the first?
//////////////////////////
그럼 약 22K짜리 파일을 두 개 가지게 된다 (두 파일 각자도 압축하면 약 7K 사이즈).
거의 같은 파일을 두 개나 가지게 되는 것이 못마땅할 수도 있다. 처음 것과 두 번째 것 사이의 차이점만 저장할 수 없을까?

//////////////////////////
It turns out that it can.
The initial format in which Git saves objects on disk is called a ``loose'' object format.
However, occasionally Git packs up several of these objects into a single binary file called a ``packfile'' in order to save space and be more efficient.
Git does this if you have too many loose objects around, if you run the `git gc` command manually, or if you push to a remote server.
To see what happens, you can manually ask Git to pack up the objects by calling the `git gc` command:
//////////////////////////
가능하다.
Git이 처음 개체를 저장하는 형식은 ``Loose'' 개체 포맷이라고 부른다.
나중에 이 개체를 파일 하나로 압축(Pack)할 수 있다. 이렇게 하여 공간을 절약하고 효율을 높일 수 있다.
Git은 Loose 개체가 너무 많을 때, git gc 명령을 실행했을 때, 리모트 서버로 Push할 때 이렇게 압축한다.
`git gc` 명령을 실행해서 어떻게 압축하는지 살펴보자.

[source,console]
----
$ git gc
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), done.
Total 18 (delta 3), reused 0 (delta 0)
----

//////////////////////////
If you look in your objects directory, you'll find that most of your objects are gone, and a new pair of files has appeared:
//////////////////////////
`objects` 디렉토리를 열어보면 개체 대부분이 사라졌고 한 쌍의 파일이 새로 생겼다.

[source,console]
----
$ find .git/objects -type f
.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
.git/objects/info/packs
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack
----

//////////////////////////
The objects that remain are the blobs that aren't pointed to by any commit – in this case, the ``what is up, doc?'' example and the ``test content'' example blobs you created earlier.
Because you never added them to any commits, they're considered dangling and aren't packed up in your new packfile.
//////////////////////////
압축되지 않은 Blob 개체는 어떤 커밋도 가리키지 않는 개체다. 즉, ``what is up, doc?''과 ``test content'' 예제에서 만들었던 개체이다.
어떤 커밋에도 추가돼 있지 않으면 이 개체는 `dangling` 개체로 취급되고 Packfile에 추가되지 않는다.

//////////////////////////
The other files are your new packfile and an index.
The packfile is a single file containing the contents of all the objects that were removed from your filesystem.
The index is a file that contains offsets into that packfile so you can quickly seek to a specific object.
What is cool is that although the objects on disk before you ran the `gc` were collectively about 15K in size, the new packfile is only 7K.
You've cut your disk usage by half by packing your objects.
//////////////////////////
새로 생긴 파일은 Packfile과 그 Index이다.
파일 시스템에서 삭제된 개체가 전부 이 Packfile에 저장된다.
Index 파일에 대해서는 빠르게 찾을 수 있도록 Packfile에 오프셋이 들어 있다.
`gc` 명령을 실행하기 전에 있던 파일 크기는 약 15K 정도였었는데 새로 만들어진 Packfile은 겨우 7K에 불과하다. 짱이다.
개체를 압축하여 디스크 사용량이 반 정도로 줄었다.

//////////////////////////
How does Git do this?
When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next.
You can look into the packfile and see what Git did to save space.
The `git verify-pack` plumbing command allows you to see what was packed up:
//////////////////////////
이런 일은 어떤 식으로 처리하는 것인가?
개체를 압축시키면 Git은 먼저 이름이나 크기가 비슷한 파일을 찾는다. 그리고 두 파일을 비교해서 한 파일은 다른 부분만 저장한다.
Git이 얼마나 공간을 절약해 주는지 Packfile을 열어 확인할 수 있다.
`git verify-pack` 명령어는 압축한 내용을 보여준다.

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx
2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12
69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167
80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319
43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464
092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610
702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756
d368d0ac0678cbe6cce505be58126d3526706e54 tag    130 122 874
fe879577cb8cffcdf25441725141e310dd7d239b tree   136 136 996
d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 1132
deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree   136 136 1178
d982c7cb2c2a972ee391a85da481fc1f9127a01d tree   6 17 1314 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   8 19 1331 1 \
  deef2e1b793907545e50a2ea2ddb5ba6c58c4506
0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 1350
83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 1426
fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 1445
b042a60ef7dff760008df33cee372b945b6e884e blob   22054 5799 1463
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   9 20 7262 1 \
  b042a60ef7dff760008df33cee372b945b6e884e
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 7282
non delta: 15 objects
chain length = 1: 3 objects
.git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok
----

//////////////////////////
Here, the `033b4` blob, which if you remember was the first version of your repo.rb file, is referencing the `b042a` blob, which was the second version of the file.
The third column in the output is the size of the object in the pack, so you can see that `b042a` takes up 22K of the file, but that `033b4` only takes up 9 bytes.
What is also interesting is that the second version of the file is the one that is stored intact, whereas the original version is stored as a delta – this is because you're most likely to need faster access to the most recent version of the file.
//////////////////////////
`033b4` Blob이 처음 추가한 `repo.rb` 파일인데, 이 Blob은 두 번째 버전인 `b042a` Blob을 가리킨다.
결과에서 세 번째 컬럼은 압축된 개체의 크기를 나타낸다. `b042a`의 크기는 22K지만 `033b4`는 9바이트밖에 안 된다.
특이한 점은 원본을 그대로 저장하는 것이 첫 번째가 아니라 두 번째 버전이라는 것이다. 첫 번째 버전은 차이점만 저장된다. 최신 버전에 접근할 때가 더 많고 최신 버전에 접근하는 속도가 더 빨라야 하기 때문에 이렇게 한다.

//////////////////////////
The really nice thing about this is that it can be repacked at any time.
Git will occasionally repack your database automatically, always trying to save more space, but you can also manually repack at any time by running `git gc` by hand.
//////////////////////////
언제나 다시 압축할 수 있기 때문에 이 기능은 정말 판타스틱하다.
Git은 가끔 자동으로 데이터베이스를 재압축해서 공간을 절약한다. 그리고 `git gc` 명령으로 직접 압축할 수도 있다.

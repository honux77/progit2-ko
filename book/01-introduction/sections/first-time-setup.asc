[[_first_time]]
//////////////////////////
=== First-Time Git Setup
//////////////////////////
=== Git 최초 설정

//////////////////////////
Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they'll stick around between upgrades.
You can also change them at any time by running through the commands again.
//////////////////////////
Git을 설치하고 나면 Git의 사용 환경을 적절하게 설정해 주어야 한다.
환경 설정은 한 컴퓨터에서 한 번만 하면 된다. 설정한 내용은 Git을 업그레이드해도 유지된다.
언제든지 다시 바꿀 수 있는 명령어도 있다.

//////////////////////////
Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places:
//////////////////////////
'git config'라는 도구로 설정 내용을 확인하고 변경할 수 있다. Git은 이 설정에 따라 동작한다.(((git commands, config)))
이때 사용하는 설정 파일은 세 가지나 된다.

//////////////////////////
1. `/etc/gitconfig` file: Contains values for every user on the system and all their repositories.
  If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
2. `~/.gitconfig` or `~/.config/git/config` file: Specific to your user.
  You can make Git read and write to this file specifically by passing the `--global` option.
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
//////////////////////////
1. `/etc/gitconfig` 파일: 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다.
  `git config --system` 옵션으로 이 파일을 읽고 쓸 수 있다.
2. `~/.gitconfig`, `~/.config/git/config` 파일: 특정 사용자에게만 적용되는 설정이다.
  `git config --global` 옵션으로 이 파일을 읽고 쓸 수 있다.
3. `.git/config`: 이 파일은 Git 디렉토리에 있고 특정 저장소(혹은 현재 작업 중인 프로젝트)에만 적용된다.

//////////////////////////
Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.
//////////////////////////
각 설정은 역순으로 우선시 된다. 그래서 `.git/config`가 `/etc/gitconfig`보다 우선한다.

//////////////////////////
On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
This config file can only be changed by `git config -f <file>` as an admin.
//////////////////////////
Windows에서는 `$HOME` 디렉토리에서 `.gitconfig` 파일을 찾는다(아마도 `C:\Users\$USER` 디렉토리).
Windows에서도 `/etc/gitconfig` 파일은 그 경로에서 찾는다. 이 경로는 아마도 MSys 루트의 상대경로일 텐데, MSys 루트는 인스톨러로 Git을 Windows에 설치할 때 결정된다.
'Git for Windows' 2.x 버전에서는 조금 다르다. Windows XP 사용자는 `C:\Documents and Settings\All Users\Application Data\Git\config` 디렉토리에서 찾을 수 있고 Windows Vista 이후 버전 사용자는 `C:\ProgramData\Git\config`에서 찾을 수 있다.
이 시스템 설정 파일의 경로는 `git config -f <file>` 명령으로 변경할 수 있다. 관리자 권한이 필요하다.

//////////////////////////
==== Your Identity
//////////////////////////
==== 사용자 정보

//////////////////////////
The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:
//////////////////////////
Git을 설치하고 나서 가장 먼저 해야 하는 것은 사용자 이름과 이메일 주소를 설정하는 것이다.
Git은 커밋할 때마다 이 정보를 사용한다. 한 번 커밋한 후에는 정보를 변경할 수 없다.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

//////////////////////////
Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.
//////////////////////////
다시 말하자면 `--global` 옵션으로 설정하는 것은 딱 한 번만 하면 된다. 해당 시스템에서 해당 사용자가 사용할 때는 이 정보를 사용한다.
만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 `--global` 옵션을 빼고 명령을 실행한다.

//////////////////////////
Many of the GUI tools will help you do this when you first run them.
//////////////////////////
GUI 도구들은 처음 실행할 때 이 설정을 묻는다.

//////////////////////////
==== Your Editor
//////////////////////////
==== 편집기

//////////////////////////
Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.
If you want to use a different text editor, such as Emacs, you can do the following:
//////////////////////////
사용자 정보를 설정하고 나면 Git에서 사용할 텍스트 편집기를 고른다.
기본적으로 Git은 시스템의 기본 편집기를 사용한다.
하지만, Emacs 같은 다른 텍스트 편집기를 사용할 수 있고 아래와 같이 실행하면 된다.

[source,console]
----
$ git config --global core.editor emacs
----

//////////////////////////
While on a Windows system, if you want to use a different text editor, such as Notepad++, you can do the following:
//////////////////////////
Windows 사용자라면 다른 텍스트 편집기를 사용할 수 있다. 아래는 Notepad++를 사용하는 설정이다.

//////////////////////////
On a x86 system
//////////////////////////
x86 시스템

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

//////////////////////////
On a x64 system
//////////////////////////
x64 시스템

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
//////////////////////////
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix based systems like Linux and OS X or a Windows system.
If you are not familiar with either of these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.
====
//////////////////////////
====
Vim과 Emacs, Notepad++은 꽤 인기 있는 편집기로 개발자들이 즐겨 사용한다. OS X나 Linux 같은 Unix 시스템이나 Windows 시스템에서 사용 가능하다.
이 편집기가 불편해서 다른 편집기를 사용해야 한다면 Git 편집기로 설정하는 방법을 찾아봐야 한다.
====

[WARNING]
//////////////////////////
====
You may find, if you don't setup an editor like this, you will likely get into a really confusing state when they are launched.
Such example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====
//////////////////////////
====
자신의 편집기를 설정하지 않으면 갑자기 실행된 편집기에 당황할 수 있다.
그땐 당황하지 말고 편집기를 그냥 종료하면 Git 명령을 취소할 수 있다.
====

//////////////////////////
==== Checking Your Settings
//////////////////////////
==== 설정 확인

//////////////////////////
If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:
//////////////////////////
`git config --list` 명령을 실행하면 설정한 모든 것을 보여준다. 그래서 바로 확인할 수 있다.

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

//////////////////////////
You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.
//////////////////////////
Git은 같은 키를 여러 파일(`/etc/gitconfig`와 `~/.gitconfig` 같은)에서 읽기 때문에 같은 키가 여러 개 있을 수도 있다.
그러면 Git은 나중 값을 사용한다.

//////////////////////////
You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))
//////////////////////////
`git config <key>` 명령으로 Git이 특정 Key에 대해 어떤 값을 사용하는지 확인할 수 있다.(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

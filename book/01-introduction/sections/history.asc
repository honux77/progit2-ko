//////////////////////////
=== A Short History of Git
//////////////////////////
=== 짧게 보는 Git의 역사

//////////////////////////
As with many great things in life, Git began with a bit of creative destruction and fiery controversy.
//////////////////////////
우리네 삶의 삼라만상처럼 Git 또한 창조적 파괴와 활활 타오르는 갈등 속에서 시작됐다.

//////////////////////////
The Linux kernel is an open source software project of fairly large scope.(((Linux)))
For most of the lifetime of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files.
In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.(((BitKeeper)))
//////////////////////////
Linux 커널은 굉장히 규모가 큰 오픈소스 프로젝트다.(((Linux)))
Linux 커널의 삶 대부분은(1991–2002) Patch와 단순 압축 파일로만 관리했다.
2002년에 드디어 Linux 커널은 BitKeeper라고 불리는 상용 DVCS를 사용하기 시작했다.(((BitKeeper)))

//////////////////////////
In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool's free-of-charge status was revoked.
This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper.(((Linus Torvalds)))
Some of the goals of the new system were as follows:
//////////////////////////
2005년에 커뮤니티가 만드는 Linux 커널과 이익을 추구하는 회사가 개발한 BitKeeper의 관계는 틀어졌다. BitKeeper의 무료 사용이 제고된 것이다.
이 사건은 Linux 개발 커뮤니티(특히 Linux 창시자 Linus Torvalds)가 자체 도구를 만드는 계기가 됐다.(((Linus Torvalds)))
Git은 BitKeeper를 사용하면서 배운 교훈을 기초로 아래와 같은 목표를 세웠다.

//////////////////////////
*  Speed
*  Simple design
*  Strong support for non-linear development (thousands of parallel branches)
*  Fully distributed
*  Able to handle large projects like the Linux kernel efficiently (speed and data size)
//////////////////////////
*  빠른 속도
*  단순한 구조
*  비선형적인 개발(수천 개의 동시 다발적인 브랜치)
*  완벽한 분산
*  Linux 커널 같은 대형 프로젝트에도 유용할 것(속도나 데이터 크기 면에서)

//////////////////////////
Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities.
It's incredibly fast, it's very efficient with large projects, and it has an incredible branching system for non-linear development (See <<_git_branching>>).
//////////////////////////
Git은 2005년 탄생하고 나서 아직도 초기 목표를 그대로 유지하고 있다. 그러면서도 사용하기 쉽게 진화하고 성숙했다.
Git은 미친 듯이 빨라서 대형 프로젝트에 사용하기도 좋다. Git은 동시다발적인 브랜치에도 끄떡없는 슈퍼 울트라 브랜칭 시스템이다(<<_git_branching>> 참고).

[[_advanced_merging]]
///////////////////
=== Advanced Merging
///////////////////
=== 고급 Merge

///////////////////
Merging in Git is typically fairly easy.
Since Git makes it easy to merge another branch multiple times, it means that you can have a very long lived branch but you can keep it up to date as you go, solving small conflicts often, rather than be suprised by one enormous conflict at the end of the series.
///////////////////
Git의 Merge은 진짜 가볍다. Git에서는 브랜치끼리 몇 번이고 Merge 하기가 쉽다. 오랫동안 합치지 않은 두 브랜치를 한 번에 Merge 하면 거대한 충돌이 발생한다. 조그마한 충돌을 자주 겪고 그걸 풀어나감으로써 브랜치를 최신으로 유지한다.

///////////////////
However, sometimes tricky conflicts do occur.
Unlike some other version control systems, Git does not try to be overly clever about merge conflict resolution.
Git's philosophy is to be smart about determining when a merge resolution is unambiguous, but if there is a conflict, it does not try to be clever about automatically resolving it.
Therefore, if you wait too long to merge two branches that diverge quickly, you can run into some issues.
///////////////////
하지만, 가끔 까다로운 충돌도 발생한다.
다른 버전 관리 시스템과 달리 Git은 충돌이 나면 모호한 상황까지 해결하려 들지 않는다.
Git의 철학은 Merge가 잘될지 아닐지 판단하는 것을 잘 하자이다. 충돌이 나도 자동으로 해결하려고 노력하지 않는다.
오랫동안 따로 유지한 두 브랜치를 Merge 하려면 몇 가지 해야 할 일이 있다.

///////////////////
In this section, we'll go over what some of those issues might be and what tools Git gives you to help handle these more tricky situations.
We'll also cover some of the different, non-standard types of merges you can do, as well as see how to back out of merges that you've done.
///////////////////
이 절에서는 어떤 Git 명령을 사용해서 무슨 일을 해야 하는지 알아보자. 그 외에도 특수한 상황에서 사용하는 Merge 방법과 Merge를 잘 마무리하는 방법을 소개한다.

///////////////////
==== Merge Conflicts
///////////////////
==== Merge 충돌

///////////////////
While we covered some basics on resolving merge conflicts in <<_basic_merge_conflicts>>, for more complex conflicts, Git provides a few tools to help you figure out what's going on and how to better deal with the conflict.
///////////////////
<<_basic_merge_conflicts>>에서 기초적인 Merge 충돌 해결에 대해서 다뤘다. Git은 복잡한 Merge 충돌이 났을 때 필요한 도구도 가지고 있다. 무슨 일이 일어났고 어떻게 해결하는 게 나은지 알 수 있다.

///////////////////
First of all, if at all possible, try to make sure your working directory is clean before doing a merge that may have conflicts.
If you have work in progress, either commit it to a temporary branch or stash it.
This makes it so that you can undo *anything* you try here.
If you have unsaved changes in your working directory when you try a merge, some of these tips may help you lose that work.
///////////////////
Merge 할 때는 충돌이 날 수 있어서 Merge 하기 전에 워킹 디렉토리를 깔끔히 정리하는 것이 좋다.
워킹 디렉토리에 작업하던 게 있다면 임시 브랜치에 커밋하거나 Stash 해둔다.
그래야 어떤 일이 일어나도 다시 되돌릴 수 있다.
작업 중인 파일을 저장하지 않은 채로 Merge 하면 작업했던 일부를 잃을 수도 있다.

///////////////////
Let's walk through a very simple example.
We have a super simple Ruby file that prints 'hello world'.
///////////////////
매우 간단한 예제를 따라가 보자.
현재 'hello world'를 출력하는 Ruby 파일을 하나 가지고 있다.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end

hello()
----

///////////////////
In our repository, we create a new branch named `whitespace` and proceed to change all the Unix line endings to DOS line endings, essentially changing every line of the file, but just with whitespace.
Then we change the line ``hello world'' to ``hello mundo''.
///////////////////
저장소에 `whitespace` 브랜치를 생성하고 모든 Unix 개행을 DOS 개행으로 바꾸어 커밋한다. 파일의 모든 라인이 바뀌었지만, 공백만 바뀌었다.
그 후 ``hello world'' 문자열을 ``hello mundo''로 바꾼 다음에 커밋한다.

[source,console]
----
$ git checkout -b whitespace
Switched to a new branch 'whitespace'

$ unix2dos hello.rb
unix2dos: converting file hello.rb to DOS format ...
$ git commit -am 'converted hello.rb to DOS'
[whitespace 3270f76] converted hello.rb to DOS
 1 file changed, 7 insertions(+), 7 deletions(-)

$ vim hello.rb
$ git diff -b
diff --git a/hello.rb b/hello.rb
index ac51efd..e85207e 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-  puts 'hello world'
+  puts 'hello mundo'^M
 end

 hello()

$ git commit -am 'hello mundo change'
[whitespace 6d338d2] hello mundo change
 1 file changed, 1 insertion(+), 1 deletion(-)
----

///////////////////
Now we switch back to our `master` branch and add some documentation for the function.
///////////////////
`master` 브랜치로 다시 이동한 다음에 함수에 대한 설명을 추가한다.

[source,console]
----
$ git checkout master
Switched to branch 'master'

$ vim hello.rb
$ git diff
diff --git a/hello.rb b/hello.rb
index ac51efd..36c06c8 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello world'
 end

$ git commit -am 'document the function'
[master bec6336] document the function
 1 file changed, 1 insertion(+)
----

///////////////////
Now we try to merge in our `whitespace` branch and we'll get conflicts because of the whitespace changes.
///////////////////
이때 `whitespace` 브랜치를 Merge 하면 공백변경 탓에 충돌이 난다.

[source,console]
----
$ git merge whitespace
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

[[_abort_merge]]
///////////////////
===== Aborting a Merge
///////////////////
===== Merge 취소하기

///////////////////
We now have a few options.
First, let's cover how to get out of this situation.
If you perhaps weren't expecting conflicts and don't want to quite deal with the situation yet, you can simply back out of the merge with `git merge --abort`.
///////////////////
Merge 중에 발생한 충돌을 해결하는 방법은 몇 가지가 있다.
첫 번째는 그저 이 상황을 벗어나는 것이다.
예상하고 있던 일도 아니고 지금 당장 처리할 일도 아니라면 `git merge --abort` 명령으로 간단히 Merge 하기 전으로 되돌린다.

[source,console]
----
$ git status -sb
## master
UU hello.rb

$ git merge --abort

$ git status -sb
## master
----

///////////////////
The `git merge --abort` option tries to revert back to your state before you ran the merge.
The only cases where it may not be able to do this perfectly would be if you had unstashed, uncommitted changes in your working directory when you ran it, otherwise it should work fine.
///////////////////
`git merge --abort` 명령은 Merge 하기 전으로 되돌린다.
완전히 뒤로 되돌리지 못하는 유일한 경우는 Merge 전에 워킹 디렉토리에서 Stash 하지 않았거나 커밋하지 않은 파일이 존재하고 있었을 때뿐이다. 그 외에는 잘 돌아간다.

///////////////////
If for some reason you find yourself in a horrible state and just want to start over, you can also run `git reset --hard HEAD` or wherever you want to get back to.
Remember again that this will blow away your working directory, so make sure you don't want any changes there.
///////////////////
어떤 이유로든 Merge를 처음부터 다시 하고 싶다면 `git reset --hard HEAD` 명령으로 되돌릴 수 있다.
이 명령은 워킹 디렉토리를 그 시점으로 완전히 되돌려서 저장하지 않은 것은 사라진다는 점에 주의하자.

///////////////////
===== Ignoring Whitespace
///////////////////
===== 공백 무시하기

///////////////////
In this specific case, the conflicts are whitespace related.
We know this because the case is simple, but it's also pretty easy to tell in real cases when looking at the conflict because every line is removed on one side and added again on the other.
By default, Git sees all of these lines as being changed, so it can't merge the files.
///////////////////
공백 때문에 충돌이 날 때도 있다.
단순한 상황이고 실제로 충돌난 파일을 살펴봤을 때 한 쪽의 모든 라인이 지워지고 다른 쪽에는 추가됐기 때문에 간단하다고 할 수 있다.
기본적으로 Git은 이런 모든 라인이 변경됐다고 인지하여 Merge 할 수 없다.

///////////////////
The default merge strategy can take arguments though, and a few of them are about properly ignoring whitespace changes.
If you see that you have a lot of whitespace issues in a merge, you can simply abort it and do it again, this time with `-Xignore-all-space` or `-Xignore-space-change`.
The first option ignores whitespace *completely* when comparing lines, the second treats sequences of one or more whitespace characters as equivalent.
///////////////////
기본 Merge 전략은 공백의 변화는 무시하도록 하는 옵션을 주는 것이다.
Merge 할 때 무수한 공백 때문에 문제가 생기면 그냥 Merge를 취소한 다음 `-Xignore-all-space`나 `-Xignore-space-change` 옵션을 주어 다시 Merge 한다.
첫 번째 옵션은 *모든* 공백을 무시하고 두 번째 옵션은 뭉쳐 있는 공백을 하나로 취급한다.

[source,console]
----
$ git merge -Xignore-space-change whitespace
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

///////////////////
Since in this case, the actual file changes were not conflicting, once we ignore the whitespace changes, everything merges just fine.
///////////////////
위 예제는 모든 공백 변경 사항을 무시하면 실제 파일은 충돌 나지 않고 모든 Merge가 잘 실행된다.

///////////////////
This is a lifesaver if you have someone on your team who likes to occasionally reformat everything from spaces to tabs or vice-versa.
///////////////////
팀원 중 누군가 스페이스를 탭으로 바꾸거나 탭을 스페이스로 바꾸는 짓을 했을 때 이 옵션이 그대를 구원해 준다.

[[_manual_remerge]]
///////////////////
===== Manual File Re-merging
///////////////////
===== 수동으로 Merge 하기

///////////////////
Though Git handles whitespace pre-processing pretty well, there are other types of changes that perhaps Git can't handle automatically, but are scriptable fixes.
As an example, let's pretend that Git could not handle the whitespace change and we needed to do it by hand.
///////////////////
Merge 작업할 때 공백 처리 옵션을 사용하면 Git이 꽤 잘해준다. 하지만, Git이 자동으로 해결하지 못하는 때도 있다. 이럴 때는 외부 도구의 도움을 받아 해결한다.
예를 들어 Git이 자동으로 해결해주지 못하는 상황에 부닥치면 직접 손으로 해결해야 한다.

///////////////////
What we really need to do is run the file we're trying to merge in through a `dos2unix` program before trying the actual file merge.
So how would we do that?
///////////////////
파일을 `dos2unix`로 변환하고 Merge 하면 된다.
이걸 Git에서 어떻게 하는지 살펴보자.

///////////////////
First, we get into the merge conflict state. Then we want to get copies of my version of the file, their version (from the branch we're merging in) and the common version (from where both sides branched off). Then we want to fix up either their side or our side and re-try the merge again  for just this single file.
///////////////////
먼저 Merge 충돌 상태에 있다고 치자. 현 시점의 파일과 Merge 할 파일, 공통 조상의 파일이 필요하다. 이 파일들로 어쨌든 잘 Merge 되도록 수정하고 다시 Merge를 시도해야 한다.

///////////////////
Getting the three file versions is actually pretty easy.
Git stores all of these versions in the index under ``stages'' which each have numbers associated with them.
Stage 1 is the common anecestor, stage 2 is your version and stage 3 is from the `MERGE_HEAD`, the version you're merging in (``theirs'').
///////////////////
우선 세 가지 버전의 파일을 얻는 건 쉽다.
Git은 세 버전의 모든 파일에 ``stages'' 숫자를 붙여서 Index에 다 가지고 있다.
Stage 1는 공통 조상 파일, Stage 2는 현재 개발자의 버전에 해당하는 파일, Stage 3은 `MERGE_HEAD`가 가리키는 커밋의 파일이다.

///////////////////
You can extract a copy of each of these versions of the conflicted file with the `git show` command and a special syntax.
///////////////////
`git show` 명령으로 각 버전의 파일을 꺼낼 수 있다.

[source,console]
----
$ git show :1:hello.rb > hello.common.rb
$ git show :2:hello.rb > hello.ours.rb
$ git show :3:hello.rb > hello.theirs.rb
----

///////////////////
If you want to get a little more hard core, you can also use the `ls-files -u` plumbing command to get the actual SHAs of the Git blobs for each of these files.
///////////////////
좀 더 저수준으로 파고들자면 `ls-files -u` 명령을 사용한다. 이 명령은 Plumbing 명령으로 각 파일을 나타내는 Git Blob의 SHA를 얻을 수 있다.

[source,console]
----
$ git ls-files -u
100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1	hello.rb
100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2	hello.rb
100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3	hello.rb
----

///////////////////
The `:1:hello.rb` is just a shorthand for looking up that blob SHA-1.
///////////////////
`:1:hello.rb`는 그냥 Blob SHA-1를 지칭하는 줄임말이다.

///////////////////
Now that we have the content of all three stages in our working directory, we can manually fix up theirs to fix the whitespace issue and re-merge the file with the little-known `git merge-file` command which does just that.
///////////////////
이제 워킹 디렉토리에 세 버전의 파일을 모두 가져왔다. 공백 문제를 수동으로 고친 다음에 다시 Merge 한다. Merge 할 때는 'git merge-file' 명령을 이용한다.

[source,console]
----
$ dos2unix hello.theirs.rb
dos2unix: converting file hello.theirs.rb to Unix format ...

$ git merge-file -p \
    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb

$ git diff -b
diff --cc hello.rb
index 36c06c8,e85207e..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,8 -1,7 +1,8 @@@
  #! /usr/bin/env ruby

 +# prints out a greeting
  def hello
-   puts 'hello world'
+   puts 'hello mundo'
  end

  hello()
----

///////////////////
At this point we have nicely merged the file.
In fact, this actually works better than the `ignore-all-space` option because this actually fixes the whitespace changes before merge instead of simply ignoring them.
In the `ignore-all-space` merge, we actually ended up with a few lines with DOS line endings, making things mixed.
///////////////////
이렇게 해서 멋지게 Merge가 완료된 파일을 얻었다.
사실 이것이 `ignore-all-space` 옵션을 사용하는 것보다 더 나은 방법이다. 왜냐면 공백을 무시하지 않고 실제로 고쳤기 때문이다.
`ignore-all-space` 옵션을 사용한 Merge 에서는 여전히 DOS의 개행 문자가 남아서 한 파일에 두 형식의 개행문자가 뒤섞인다.

///////////////////
If you want to get an idea before finalizing this commit about what was actually changed between one side or the other, you can ask `git diff` to compare what is in your working directory that you're about to commit as the result of the merge to any of these stages.
Let's go through them all.
///////////////////
Merge 커밋을 완료하기 전에 양쪽 부모에 대해서 무엇이 바뀌었는지 확인하려면 `git diff`를 사용한다. 이 명령을 이용하면 Merge 의 결과로 워킹 디렉토리에 무엇이 바뀌었는지 알 수 있다.
한번 자세히 살펴보자.

///////////////////
To compare your result to what you had in your branch before the merge, in other words, to see what the merge introduced, you can run `git diff --ours`
///////////////////
Merge 후의 결과를 Merge 하기 전의 브랜치와 비교하려면, 다시 말해 무엇이 합쳐졌는지 알려면 `git diff --ours` 명령을 실행한다.

[source,console]
----
$ git diff --ours
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index 36c06c8..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -2,7 +2,7 @@

 # prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

///////////////////
So here we can easily see that what happened in our branch, what we're actually introducing to this file with this merge, is changing that single line.
///////////////////
위의 결과에서 Merge를 했을 때 현재 브랜치에서는 무엇을 추가했는지를 알 수 있다.

///////////////////
If we want to see how the result of the merge differed from what was on their side, you can run `git diff --theirs`.
In this and the following example, we have to use `-b` to strip out the whitespace because we're comparing it to what is in Git, not our cleaned up `hello.theirs.rb` file.
///////////////////
Merge 할 파일을 가져온 쪽과 비교해서 무엇이 바뀌었는지 보려면 `git diff --theirs`를 실행한다.
아래 예제에서는 공백을 빼고 비교하기 위해 `-b` 옵션을 같이 써주었다.

[source,console]
----
$ git diff --theirs -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index e85207e..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello mundo'
 end
----

///////////////////
Finally, you can see how the file has changed from both sides with `git diff --base`.
///////////////////
마지막으로 `git diff --base`를 사용해서 양쪽 모두와 비교하여 바뀐 점을 알아본다.

[source,console]
----
$ git diff --base -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index ac51efd..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,8 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

///////////////////
At this point we can use the `git clean` command to clear out the extra files we created to do the manual merge but no longer need.
///////////////////
수동 Merge를 위해서 만들었던 각종 파일은 이제 필요 없으니 `git clean` 명령을 실행해서 지워준다.

[source,console]
----
$ git clean -f
Removing hello.common.rb
Removing hello.ours.rb
Removing hello.theirs.rb
----

[[_checking_out_conflicts]]
///////////////////
===== Checking Out Conflicts
///////////////////
===== 충돌 파일 Checkout

///////////////////
Perhaps we're not happy with the resolution at this point for some reason, or maybe manually editing one or both sides still didn't work well and we need more context.
///////////////////
앞서 살펴본 여러가지 방법으로 충돌을 해결했지만 바라던 결과가 아닐 수도 있고 심지어 결과가 잘 동작하지 않아 충돌을 직접 수동으로 더 많은 정보를 살펴보며 해결해야 하는 경우도 있다.

///////////////////
Let's change up the example a little.
For this example, we have two longer lived branches that each have a few commits in them but create a legitimate content conflict when merged.
///////////////////
예제를 조금 바꿔보자.
이번 예제에서는 긴 호흡의 브랜치 두 개가 있다. 각 브랜치에는 몇 개의 커밋이 있는데 양쪽은 Merge 할 때 반드시 충돌이 날 만한 내용이 들어 있다.

[source,console]
----
$ git log --graph --oneline --decorate --all
* f1270f7 (HEAD, master) update README
* 9af9d3b add a README
* 694971d update phrase to hola world
| * e3eb223 (mundo) add more tests
| * 7cff591 add testing script
| * c3ffff1 changed text to hello mundo
|/
* b7dcc89 initial hello world code
----

///////////////////
We now have three unique commits that live only on the `master` branch and three others that live on the `mundo` branch.
If we try to merge the `mundo` branch in, we get a conflict.
///////////////////
`master`에만 있는 세 개의 커밋과 `mundo` 브랜치에만 존재하는 또 다른 세 개의 커밋이 있다.
`master` 브랜치에서 `mundo` 브랜치를 Merge 하면 충돌이 난다.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

///////////////////
We would like to see what the merge conflict is.
If we open up the file, we'll see something like this:
///////////////////
해당 파일을 열어서 충돌이 발생한 내용을 보면
아래와 같다.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< HEAD
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> mundo
end

hello()
----

///////////////////
Both sides of the merge added content to this file, but some of the commits modified the file in the same place that caused this conflict.
///////////////////
양쪽 브랜치에서 추가된 부분이 이 파일에 다 적용됐다. 적용한 커밋 중 파일의 같은 부분을 수정해서 위와 같은 충돌이 생긴다.

///////////////////
Let's explore a couple of tools that you now have at your disposal to determine how this conflict came to be.
Perhaps it's not obvious how exactly you should fix this conflict.
You need more context.
///////////////////
충돌을 해결하는 몇 가지 도구에 대해 알아보자.
어쩌면 이 충돌을 어떻게 해결해야 하는지 명확하지 않을 수도 있다.
맥락을 좀 더 살펴봐야 하는 상황 말이다.

///////////////////
One helpful tool is `git checkout` with the `--conflict' option.
This will re-checkout the file again and replace the merge conflict markers.
This can be useful if you want to reset the markers and try to resolve them again.
///////////////////
`git checkout` 명령에 `--conflict` 옵션을 붙여 사용하는 게 좋은 방법이 될 수 있다.
이 명령은 파일을 다시 Checkout 받아서 충돌 표시된 부분을 교체한다.
충돌 난 부분은 원래의 코드로 되돌리고 다시 고쳐보려고 할 때 알맞은 도구다.

///////////////////
You can pass `--conflict` either `diff3` or `merge` (which is the default).
If you pass it `diff3`, Git will use a slightly different version of conflict markers, not only giving you the ``ours'' and ``theirs'' versions, but also the ``base'' version inline to give you more context.
///////////////////
`--conflict` 옵션에는 `diff3`나 `merge`를 넘길 수 있고 `merge`가 기본 값이다.
`--conflict` 옵션에 `diff3`를 사용하면 Git은 약간 다른 모양의 충돌 표시를 남긴다. ``ours''나 ``theirs''말고도 ``base''버전의 내용까지 제공한다.

[source,console]
----
$ git checkout --conflict=diff3 hello.rb
----

///////////////////
Once we run that, the file will look like this instead:
///////////////////
위 명령을 실행하면 아래와 같은 결과가 나타난다.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
||||||| base
  puts 'hello world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end

hello()
----

///////////////////
If you like this format, you can set it as the default for future merge conflicts by setting the `merge.conflictstyle` setting to `diff3`.
///////////////////
이런 형태의 충돌 표시를 계속 보고 싶다면 기본으로 사용하도록 `merge.conflictstyle` 설정 값을 `diff3`로 설정한다.

[source,console]
----
$ git config --global merge.conflictstyle diff3
----

///////////////////
The `git checkout` command can also take `--ours` and `--theirs` options, which can be a really fast way of just choosing either one side or the other without merging things at all.
///////////////////
`git checkout` 명령도 `--ours`와 `--theirs` 옵션을 지원한다. 이 옵션은 Merge 하지 않고 둘 중 한쪽만을 선택할 때 사용한다.

///////////////////
This can be particularly useful for conflicts of binary files where you can simply choose one side, or where you only want to merge certain files in from another branch - you can do the merge and then checkout certain files from one side or the other before committing.
///////////////////
이 옵션은 바이너리 파일이 충돌 나서 한쪽을 선택해야 하는 상황이나 한쪽 브랜치의 온전한 파일을 원할 때 사용할 수 있다. 일단 Merge 하고 나서 특정 파일만 Checkout 한 후에 커밋하는 방법도 있다.

[[_merge_log]]
///////////////////
===== Merge Log
///////////////////
===== Merge 로그

///////////////////
Another useful tool when resolving merge conflicts is `git log`.
This can help you get context on what may have contributed to the conflicts.
Reviewing a little bit of history to remember why two lines of development were touching the same area of code can be really helpful sometimes.
///////////////////
`git log` 명령은 충돌을 해결할 때도 도움이 된다.
로그에는 충돌을 해결할 때 도움이 될만한 정보가 있을 수 있다.
과거를 살짝 들춰보면 개발 당시에 같은 곳을 고쳐야만 했던 이유를 밝혀내는 데 도움이 된다.

///////////////////
To get a full list of all of the unique commits that were included in either branch involved in this merge, we can use the ``triple dot'' syntax that we learned in <<_triple_dot>>.
///////////////////
``Triple Dot'' 문법을 이용하면 Merge 에 사용한 양 브랜치의 모든 커밋의 목록을 얻을 수 있다. 자세한 문법은 <<_triple_dot>>를 참고한다.

[source,console]
----
$ git log --oneline --left-right HEAD...MERGE_HEAD
< f1270f7 update README
< 9af9d3b add a README
< 694971d update phrase to hola world
> e3eb223 add more tests
> 7cff591 add testing script
> c3ffff1 changed text to hello mundo
----

///////////////////
That's a nice list of the six total commits involved, as well as which line of development each commit was on.
///////////////////
위와 같이 총 6개의 커밋을 볼 수 있다. 커밋이 어떤 브랜치에서 온 것인지 보여준다.

///////////////////
We can further simplify this though to give us much more specific context.
If we add the `--merge` option to `git log`, it will only show the commits in either side of the merge that touch a file that's currently conflicted.
///////////////////
맥락에 따라 필요한 결과만 추려 볼 수도 있다.
`git log` 명령에 `--merge` 옵션을 추가하면 충돌이 발생한 파일이 속한 커밋만 보여준다.

[source,console]
----
$ git log --oneline --left-right --merge
< 694971d update phrase to hola world
> c3ffff1 changed text to hello mundo
----

///////////////////
If you run that with the `-p` option instead, you get just the diffs to the file that ended up in conflict.
This can be *really* helpful in quickly giving you the context you need to help understand why something conflicts and how to more intelligently resolve it.
///////////////////
`--merge`대신 `-p`를 사용하면 충돌 난 파일의 변경사항만 볼 수 있다.
이건 왜 충돌이 났는지 또 이를 해결하기 위해 어떻게 해야 하는지 이해하는 데 *진짜로* 유용하다.

///////////////////
===== Combined Diff Format
///////////////////
===== Combined Diff 형식

///////////////////
Since Git stages any merge results that are successful, when you run `git diff` while in a conflicted merge state, you only get what is currently still in conflict.
This can be helpful to see what you still have to resolve.
///////////////////
Merge가 성공적으로 끝난 파일은 Staging Area에 올려놓았다. 이 상태에서 충돌 난 파일들이 그대로 있을 때 `git diff` 명령을 실행하면 충돌 난 파일이 무엇인지 알 수 있다.
어떤 걸 더 고쳐야 하는지 아는 데에 도움이 된다.

///////////////////
When you run `git diff` directly after a merge conflict, it will give you information in a rather unique diff output format.
///////////////////
Merge 하다가 충돌이 났을 때 `git diff` 명령을 실행하면 꽤 생소한 Diff 결과를 보여준다.

[source,console]
----
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,11 @@@
  #! /usr/bin/env ruby

  def hello
++<<<<<<< HEAD
 +  puts 'hola world'
++=======
+   puts 'hello mundo'
++>>>>>>> mundo
  end

  hello()
----

///////////////////
The format is called ``Combined Diff'' and gives you two columns of data next to each line.
The first column shows you if that line is different (added or removed) between the ``ours'' branch and the file in your working directory and the second column does the same between the ``theirs'' branch and your working directory copy.
///////////////////
이런 형식을 ``Combined Diff''라고 한다. 각 라인은 두 개의 컬럼으로 구분할 수 있다.
첫 번째 컬럼은 ``ours'' 브랜치와 워킹 디렉토리의 차이(추가 또는 삭제)를 보여준다. 두 번째 컬럼은 ``theirs''와 워킹 디렉토리사이의 차이를 나타낸다.

///////////////////
So in that example you can see that the `<<<<<<<` and `>>>>>>>` lines are in the working copy but were not in either side of the merge. This makes sense because the merge tool stuck them in there for our context, but we're expected to remove them.
///////////////////
이 예제에서 `<<<<<<<`와 `>>>>>>>` 충돌 마커 표시는 어떤 쪽에도 존재하지 않고 추가된 코드라는 것을 알 수 있다. 이 표시는 Merge 도구가 만들어낸 코드이기 때문이다. 물론 이 표시는 지워야 하는 라인이다.

///////////////////
If we resolve the conflict and run `git diff` again, we'll see the same thing, but it's a little more useful.
///////////////////
충돌을 다 해결하고 `git diff` 명령을 다시 실행하면 아래와 같이 보여준다. 이 결과도 유용하다.

[source,console]
----
$ vim hello.rb
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

///////////////////
This shows us that ``hola world'' was in our side but not in the working copy, that ``hello mundo'' was in their side but not in the working copy and finally that ``hola mundo'' was not in either side but is now in the working copy.
This can be useful to review before committing the resolution.
///////////////////
이 결과는 세 가지 사실을 보여준다. ``hola world''는 Our 브랜치에 있었지만 워킹 디렉토리에는 없다. ``hello mundo''는 Their 브랜치에 있었지만 워킹 디렉토리에는 없다. ``hola mundo''는 어느 쪽 브랜치에도 없고 워킹 디렉토리에는 있다.
충돌을 해결하고 마지막으로 확인하고 나서 커밋하는 데 유용하다.

///////////////////
You can also get this from the `git log` for any merge to see how something was resolved after the fact.
Git will output this format if you run `git show` on a merge commit, or if you add a `--cc` option to a `git log -p` (which by default only shows patches for non-merge commits).
///////////////////
이 정보를 `git log` 명령을 통해서도 얻을 수 있다. Merge 후에 무엇이 어떻게 바뀌었는지 알아야 할 때 유용하다.
Merge 커밋에 대해서 `git show` 명령을 실행하거나 `git log -p`에 `--cc` 옵션을 추가해도 같은 결과를 얻을 수 있다. `git log -p` 명령은 기본적으로 Merge 커밋이 아닌 커밋의 Patch를 출력한다.

[source,console]
----
$ git log --cc -p -1
commit 14f41939956d80b9e17bb8721354c33f8d5b5a79
Merge: f1270f7 e3eb223
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Sep 19 18:14:49 2014 +0200

    Merge branch 'mundo'

    Conflicts:
        hello.rb

diff --cc hello.rb
index 0399cd5,59727f0..e1d0799
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

[[_undoing_merges]]
///////////////////
==== Undoing Merges
///////////////////
==== Merge 되돌리기

///////////////////
Now that you know how to create a merge commit, you'll probably make some by mistake.
One of the great things about working with Git is that it's okay to make mistakes, because it's possible (and in many cases easy) to fix them.
///////////////////
지금까지 Merge 하는 방법을 배웠으나 Merge 할 때 실수할 수도 있다.
Git에서는 실수해도 된다. 실수해도 (대부분 간단하게) 되돌릴 수 있다.

///////////////////
Merge commits are no different.
Let's say you started work on a topic branch, accidentally merged it into `master`, and now your commit history looks like this:
///////////////////
Merge 커밋도 예외는 아니다.
토픽 브랜치에서 일을 하다가 `master`로 잘못 Merge 했다고 생각해보자. 커밋 히스토리는 아래와 같다.

///////////////////
.Accidental merge commit
image::images/undomerge-start.png[Accidental merge commit.]
///////////////////
.우발적인 Merge 커밋.
image::images/undomerge-start.png[우발적인 Merge 커밋.]

///////////////////
There are two ways to approach this problem, depending on what your desired outcome is.
///////////////////
접근 방식은 원하는 결과에 따라 두 가지로 나눌 수 있다.

///////////////////
===== Fix the references
///////////////////
===== Refs 수정

///////////////////
If the unwanted merge commit only exists on your local repository, the easiest and best solution is to move the branches so that they point where you want them to.
In most cases, if you follow the errant `git merge` with `git reset --hard HEAD~`, this will reset the branch pointers so they look like this:
///////////////////
실수로 생긴 Merge 커밋이 로컬 저장소에만 있을 때는 브랜치를 원하는 커밋을 가리키도록 옮기는 것이 쉽고 빠르다.
잘못 Merge 하고 나서 `git reset --hard HEAD~` 명령으로 브랜치를 되돌리면 된다.

///////////////////
.History after `git reset --hard HEAD~`
image::images/undomerge-reset.png[History after `git reset --hard HEAD~`.]
///////////////////
.`git reset --hard HEAD~` 실행 후의 히스토리.
image::images/undomerge-reset.png[`git reset --hard HEAD~` 실행 후의 히스토리.]

///////////////////
We covered `reset` back in <<_git_reset>>, so it shouldn't be too hard to figure out what's going on here.
Here's a quick refresher: `reset --hard` usually goes through three steps:
///////////////////
`reset`에 대해서는 이미 앞의 <<_git_reset>>에서 다뤘었기 때문에 이 내용이 그리 어렵진 않을 것이다.
간단하게 복습해보자. `reset --hard` 명령은 아래의 세 단계로 수행한다.

///////////////////
. Move the branch HEAD points to.
  In this case, we want to move `master` to where it was before the merge commit (`C6`).
. Make the index look like HEAD.
. Make the working directory look like the index.
///////////////////
. HEAD의 브랜치를 지정한 위치로 옮긴다.
  이 경우엔 `master` 브랜치를 Merge 커밋(`C6`) 이전으로 되돌린다.
. Index를 HEAD의 내용으로 바꾼다.
. 워킹 디렉토리를 Index의 내용으로 바꾼다.

///////////////////
The downside of this approach is that it's rewriting history, which can be problematic with a shared repository.
Check out <<_rebase_peril>> for more on what can happen; the short version is that if other people have the commits you're rewriting, you should probably avoid `reset`.
This approach also won't work if any other commits have been created since the merge; moving the refs would effectively lose those changes.
///////////////////
이 방법의 단점은 히스토리를 다시 쓴다는 것이다. 다른 사람들과 공유된 저장소에서 히스토리를 덮어쓰면 문제가 생길 수 있다.
무슨 문제가 일어나는지 알고 싶다면 <<_rebase_peril>>를 참고하자. 간단히 말해 다시 쓰는 커밋이 이미 다른 사람들과 공유한 커밋이라면 `reset` 하지 않는 게 좋다.
이 방법은 Merge 하고 나서 다른 커밋을 생성했다면 제대로 동작하지 않는다. HEAD를 이동시키면 Merge 이후에 만든 커밋을 잃어버린다.

[[_reverse_commit]]
///////////////////
===== Reverse the commit
///////////////////
===== 커밋 되돌리기

///////////////////
If moving the branch pointers around isn't going to work for you, Git gives you the option of making a new commit which undoes all the changes from an existing one.
Git calls this operation a ``revert'', and in this particular scenario, you'd invoke it like this:
///////////////////
브랜치를 옮기는 것을 할 수 없는 경우는 모든 변경사항을 취소하는 새로운 커밋을 만들 수도 있다.
Git에서 이 기능을 ``revert'' 라고 부른다. 지금의 경우엔 아래처럼 실행한다.

[source,console]
----
$ git revert -m 1 HEAD
[master b1d8379] Revert "Merge branch 'topic'"
----

///////////////////
The `-m 1` flag indicates which parent is the ``mainline'' and should be kept.
When you invoke a merge into `HEAD` (`git merge topic`), the new commit has two parents: the first one is `HEAD` (`C6`), and the second is the tip of the branch being merged in (`C4`).
In this case, we want to undo all the changes introduced by merging in parent #2 (`C4`), while keeping all the content from parent #1 (`C6`).
///////////////////
`-m 1` 옵션은 부모가 보호되어야 하는 ``mainline'' 이라는 것을 나타낸다.
`HEAD`로 Merge를 했을 때(`git merge topic1`) Merge 커밋은 두 개의 부모 커밋을 가진다. 첫 번째 부모 커밋은 `HEAD`(`C6`)이고 두 번째 부모 커밋은 Merge 대상 브랜치(`C4`)이다.
두 번째 부모 커밋(`C4`)에서 받아온 모든 변경사항을 되돌리고 첫 번째 부모(`C6`)로부터 받아온 변경사항은 남겨두고자 하는 상황이다.

///////////////////
The history with the revert commit looks like this:
///////////////////
변경사항을 되돌린 커밋은 히스토리에서 아래와 같이 보인다.

///////////////////
.History after `git revert -m 1`
image::images/undomerge-revert.png[History after `git revert -m 1`.]
///////////////////
.`git revert -m 1` 실행 후의 히스토리
image::images/undomerge-revert.png[`git revert -m 1` 실행 후의 히스토리.]

///////////////////
The new commit `^M` has exactly the same contents as `C6`, so starting from here it's as if the merge never happened, except that the now-unmerged commits are still in `HEAD`'s history.
Git will get confused if you try to merge `topic` into `master` again:
///////////////////
새로 만든 커밋 `^M`은 `C6`과 내용이 완전히 똑같다. 잘못 Merge 한 커밋까지 `HEAD`의 히스토리에서 볼 수 있다는 것 말고는 Merge 하지 않은 것과 같다.
`topic` 브랜치를 `master` 브랜치에 다시 Merge 하면 Git은 아래와 같이 어리둥절해한다.

[source,console]
----
$ git merge topic
Already up-to-date.
----

///////////////////
There's nothing in `topic` that isn't already reachable from `master`.
What's worse, if you add work to `topic` and merge again, Git will only bring in the changes _since_ the reverted merge:
///////////////////
이미 Merge 했던 `topic` 브랜치에는 더는 `master` 브랜치로 Merge 할 내용이 없다.
상황을 더 혼란스럽게 하는 경우는 `topic`에서 뭔가 더 일을 하고 다시 Merge를 하는 경우이다. Git은 Merge _이후에_ 새로 만들어진 커밋만 가져온다.

///////////////////
.History with a bad merge
image::images/undomerge-revert2.png[History with a bad merge.]
///////////////////
.좋지 않은 Merge가 있는 히스토리
image::images/undomerge-revert2.png[좋지 않은 Merge가 있는 히스토리.]

///////////////////
The best way around this is to un-revert the original merge, since now you want to bring in the changes that were reverted out, *then* create a new merge commit:
///////////////////
이러면 가장 좋은 방법은 되돌렸던 Merge 커밋을 다시 되돌리는 것이다. 이후에 추가한 내용을 새 Merge 커밋으로 만드는 게 좋다.

[source,console]
----
$ git revert ^M
[master 09f0126] Revert "Revert "Merge branch 'topic'""
$ git merge topic
----

///////////////////
.History after re-merging a reverted merge
image::images/undomerge-revert3.png[History after re-merging a reverted merge.]
///////////////////
.되돌린 Merge를 다시 Merge 한 후의 히스토리
image::images/undomerge-revert3.png[되돌린 Merge를 다시 Merge 한 후의 히스토리.]

///////////////////
In this example, `M` and `^M` cancel out.
`^^M` effectively merges in the changes from `C3` and `C4`, and `C8` merges in the changes from `C7`, so now `topic` is fully merged.
///////////////////
위 예제에서는 `M`과 `^M`이 상쇄됐다.
`^^M`는 `C3`와 `C4`의 변경 사항을 담고 있고 `C8`은 `C7`의 내용을 훌륭하게 Merge 했다. 이리하여 현재 `topic` 브랜치를 완전히 Merge 한 상태가 됐다.

///////////////////
==== Other Types of Merges
///////////////////
==== 다른 방식의 Merge

///////////////////
So far we've covered the normal merge of two branches, normally handled with what is called the ``recursive'' strategy of merging. There are other ways to merge branches together however. Let's cover a few of them quickly.
///////////////////
지금까지 두 브랜치를 평범하게 Merge 하는 방법에 대해 알아보았다. Merge는 보통 ``recursive'' 전략을 사용한다. 브랜치를 한 번에 Merge 하는 방법은 여러 가지다. 그 중 몇 개만 간단히 알아보자.

///////////////////
===== Our or Theirs Preference
///////////////////
===== Our/Their 선택하기

///////////////////
First of all, there is another useful thing we can do with the normal ``recursive'' mode of merging.
We've already seen the `ignore-all-space` and `ignore-space-change` options which are passed with a `-X` but we can also tell Git to favor one side or the other when it sees a conflict.
///////////////////
먼저 일반적인 ``recursive'' 전략을 사용하는 Merge 작업을 할 때 유용한 옵션을 소개한다.
앞에서 `ignore-all-space`와 `ignore-space-change` 기능을 `-X` 옵션에 붙여 쓰는 것을 보았다. 이 `-X`  옵션은 충돌이 났을 때 어떤 한 쪽을 선택할 때도 사용한다.

///////////////////
By default, when Git sees a conflict between two branches being merged, it will add merge conflict markers into your code and mark the file as conflicted and let you resolve it.
If you would prefer for Git to simply choose a specific side and ignore the other side instead of letting you manually resolve the conflict, you can pass the `merge` command either a `-Xours` or `-Xtheirs`.
///////////////////
아무 옵션도 지정하지 않고 두 브랜치를 Merge 하면 Git은 코드에 충돌 난 곳을 표시하고 해당 파일을 충돌 난 파일로 표시해준다.
충돌을 직접 해결하는 게 아니라 미리 Git에게 충돌이 났을 때 두 브랜치 중 한쪽을 선택하라고 알려줄 수 있다. `merge` 명령을 사용할 때 `-Xours`나 `Xtheirs` 옵션을 추가하면 된다.

///////////////////
If Git sees this, it will not add conflict markers.
Any differences that are mergeable, it will merge.
Any differences that conflict, it will simply choose the side you specify in whole, including binary files.
///////////////////
Git에 이 옵션을 주면 충돌 표시가 남지 않는다.
Merge가 가능하면 Merge 될 것이고
충돌이 나면 사용자가 명시한 쪽의 내용으로 대체한다. 바이너리 파일도 똑같다.

///////////////////
If we go back to the ``hello world'' example we were using before, we can see that merging in our branch causes conflicts.
///////////////////
``hello world'' 예제로 돌아가서 다시 Merge를 해보자. Merge를 하면 충돌이 나는 것을 볼 수 있다.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Automatic merge failed; fix conflicts and then commit the result.
----

///////////////////
However if we run it with `-Xours` or `-Xtheirs` it does not.
///////////////////
하지만 `-Xours`나 `-Xtheirs` 옵션을 주면 충돌이 났다는 소리가 없다.

[source,console]
----
$ git merge -Xours mundo
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 test.sh  | 2 ++
 2 files changed, 3 insertions(+), 1 deletion(-)
 create mode 100644 test.sh
----

///////////////////
In that case, instead of getting conflict markers in the file with ``hello mundo'' on one side and ``hola world'' on the other, it will simply pick ``hola world''.
However, all the other non-conflicting changes on that branch are merged successfully in.
///////////////////
한쪽 파일에는 ``hello mundo''가 있고 다른 파일에는 ``hola world''가 있다.
이 Merge에서 충돌 표시를 하는 대신 간단히 ``hola world''를 선택한다. 충돌 나지 않은 나머지는 잘 Merge 된다.

///////////////////
This option can also be passed to the `git merge-file` command we saw earlier by running something like `git merge-file --ours` for individual file merges.
///////////////////
이 옵션은 `git merge-file` 명령에도 사용할 수 있다. 앞에서 이미 `git merge-file --ours` 같이 실행해서 파일을 따로따로 Merge 했다.

///////////////////
If you want to do something like this but not have Git even try to merge changes from the other side in, there is a more draconian option, which is the ``ours'' merge _strategy_.
This is different from the ``ours'' recursive merge _option_.
///////////////////
이런 식의 동작을 원하지만 애초에 Git이 Merge 시도조차 하지 않는 자비 없는 옵션도 있다. ``ours'' Merge __전략__이다.
이 전략은 Recursive Merge 전략의 ``ours'' __옵션__과는 다르다.

///////////////////
This will basically do a fake merge.
It will record a new merge commit with both branches as parents, but it will not even look at the branch you're merging in.
It will simply record as the result of the merge the exact code in your current branch.
///////////////////
이 작업은 기본적으로 거짓으로 Merge 한다.
그리고 양 브랜치를 부모로 삼는 새 Merge 커밋을 만든다. 하지만, Their 브랜치는 참고하지 않는다.
Our 브랜치의 코드를 그대로 사용하고 Merge 한 것처럼 기록할 뿐이다.

[source,console]
----
$ git merge -s ours mundo
Merge made by the 'ours' strategy.
$ git diff HEAD HEAD~
$
----

///////////////////
You can see that there is no difference between the branch we were on and the result of the merge.
///////////////////
지금 있는 브랜치와 Merge 결과가 다르지 않다는 것을 알 수 있다.

///////////////////
This can often be useful to basically trick Git into thinking that a branch is already merged when doing a merge later on.
For example, say you branched off a `release` branch and have done some work on it that you will want to merge back into your `master` branch at some point.
In the meantime some bugfix on `master` needs to be backported into your `release` branch.
You can merge the bugfix branch into the `release` branch and also `merge -s ours` the same branch into your `master` branch (even though the fix is already there) so when you later merge the `release` branch again, there are no conflicts from the bugfix.
///////////////////
이 `ours` 전략을 이용해 이미 Merge가 되었다고 Git을 속이고 실제로는 Merge를 나중에 수행한다.
예를 들어 `release` 브랜치을 만들고 여기에도 코드를 추가했다. 언젠가 이것을 `master` 브랜치에도 Merge 해야 하지만 아직은 하지 않았다.
그리고 `master` 브랜치에서 bugfix 브랜치를 만들어 버그를 수정하고 이것을 `release` 브랜치에도 적용(Backport)해야 한다.
bugfix 브랜치를 `release` 브랜치로 Merge 하고 이미 포함된 `master` 브랜치에도 `merge -s ours` 명령으로 Merge 해 둔다. 이렇게 하면 나중에 `release` 브랜치를 Merge 할 때 버그 수정에 대한 커밋으로 충돌이 일어나지 않게끔 할 수 있다.

include::subtree-merges.asc[]

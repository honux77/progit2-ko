[[_credential_caching]]
////////////////////
=== Credential Storage
////////////////////
=== Credential 저장소

(((credentials)))
(((git commands, credential)))
////////////////////
If you use the SSH transport for connecting to remotes, it's possible for you to have a key without a passphrase, which allows you to securely transfer data without typing in your username and password.
However, this isn't possible with the HTTP protocols – every connection needs a username and password.
This gets even harder for systems with two-factor authentication, where the token you use for a password is randomly generated and unpronounceable.
////////////////////
SSH 프로토콜을 사용하여 리모트 저장소에 접근할 때 Passphase 없이 생성한 SSH Key를 사용하면 사용자 이름과 비밀번호를 입력하지 않고도 안전하게 데이터를 주고받을 수 있다.
반면 HTTP 프로토콜을 사용하는 경우는 매번 사용자 이름과 비밀번호를 입력해야 한다.

////////////////////
Fortunately, Git has a credentials system that can help with this.
Git has a few options provided in the box:
////////////////////
다행히도 Git은 이렇게 매번 인증정보(Credential)를 입력하는 경우 인증정보를 저장해두고 자동으로 입력해주는 시스템을 제공한다.
Git Credential 기능이 제공하는 옵션은 아래와 같다.

////////////////////
* The default is not to cache at all.
  Every connection will prompt you for your username and password.
* The ``cache'' mode keeps credentials in memory for a certain period of time.
  None of the passwords are ever stored on disk, and they are purged from the cache after 15 minutes.
* The ``store'' mode saves the credentials to a plain-text file on disk, and they never expire.
  This means that until you change your password for the Git host, you won't ever have to type in your credentials again.
  The downside of this approach is that your passwords are stored in cleartext in a plain file in your home directory.
* If you're using a Mac, Git comes with an ``osxkeychain'' mode, which caches credentials in the secure keychain that's attached to your system account.
  This method stores the credentials on disk, and they never expire, but they're encrypted with the same system that stores HTTPS certificates and Safari auto-fills.
* If you're using Windows, you can install a helper called ``wincred.''
  This is similar to the ``osxkeychain'' helper described above, but uses the Windows Credential Store to control sensitive information.
////////////////////
* 일단 기본적으로 아무런 설정도 하지 않으면 어떤 비밀번호도 저장하지 않는다.
  이 경우 인증이 필요한 때 매번 사용자 이름과 비밀번호를 입력해야 한다.
* ``cache'' 모드로 설정하면 일정 시간 동안 메모리에 사용자 이름과 비밀번호 같은 인증정보를 기억한다.
  이 정보를 Disk에 저장하지는 않으며 메모리에서도 15분 까지만 유지한다.
* ``store'' 모드로 설정하면 인증정보를 Disk의 텍스트 파일로 저장하며 계속 유지한다.
  계속 유지한다는 말은 리모트의 인증정보를 변경하지 않는 한 다시 인증정보를 입력하지 않아도 접근할 수 있다는 말이다.
  ``store'' 모드를 사용할 때 주의할 점은 인증정보가 사용자 홈 디렉토리 아래에 일반 텍스트 파일로 저장된다는 점이다.
* Mac에서 Git을 사용하는 경우 ``osxkeychain'' 모드를 사용하면 Mac에서 제공하는 Keychain 시스템에 사용자 이름과 비밀번호를 현재 로그인 계정에 속하게 저장한다.
  ``store'' 모드하면 인증정보를 Disk에 저장하고 인증정보가 만료되지 않는 점은 같지만, Safari 브라우저가 인증정보를 저장하는 것과 같은 수준으로 암호화해서 저장한다는 점이 다르다.
* Windows 환경에서는 ``wincred'' 라는 Helper가 있다.
  ``osxkeychain'' Helper와 비슷하게 동작하며 Windows Credential Store를 사용하여 안전하게 인증정보를 저장한다.

////////////////////
You can choose one of these methods by setting a Git configuration value:
////////////////////
위에서 설명한 여러 모드 중 하나를 아래와 같이 설정할 수 있다.

[source,console]
----
$ git config --global credential.helper cache
----

////////////////////
Some of these helpers have options.
The ``store'' helper can take a `--file <path>` argument, which customizes where the plain-text file is saved (the default is `~/.git-credentials`).
The ``cache'' helper accepts the `--timeout <seconds>` option, which changes the amount of time its daemon is kept running (the default is ``900'', or 15 minutes).
Here's an example of how you'd configure the ``store'' helper with a custom file name:
////////////////////
추가 옵션을 지정할 수 있는 Helper도 있다.
``store'' Helper는 `--file <path>` 옵션을 사용하여 인증정보를 저장할 텍스트 파일의 위치를 지정한다. 기본 값은 `~/.git-credentials` 이다.
``cache'' Helper는 `--timeout <seconds>` 옵션을 사용하여 언제까지 인증정보를 메모리에 유지할지 설정한다. 기본 값은 ``900'' 초로 15분이다.
기본 경로가 아닌 다른 경로를 지정해서 인증정보를 저장하려면 아래와 같이 실행한다.

[source,console]
----
$ git config --global credential.helper 'store --file ~/.my-credentials'
----

////////////////////
Git even allows you to configure several helpers.
When looking for credentials for a particular host, Git will query them in order, and stop after the first answer is provided.
When saving credentials, Git will send the username and password to *all* of the helpers in the list, and they can choose what to do with them.
Here's what a `.gitconfig` would look like if you had a credentials file on a thumb drive, but wanted to use the in-memory cache to save some typing if the drive isn't plugged in:
////////////////////
Helper를 여러개 섞어서 쓸 수도 있다.
인증이 필요한 리모트에 접근할 때 Git은 인증정보를 찾는데 Helper가 여러개 있으면 순서대로 찾는다.
반대로 인증정보를 저장할 때는 설정한 모든 모드에 저장한다.
아래 예제는 첫 번째 Path에 대해 인증정보를 읽거나 저장에 실패하면 두 번째 모드에 따라 메모리에서만 인증정보를 유지한다.

[source,ini]
----
[credential]
    helper = store --file /mnt/thumbdrive/.git-credentials
    helper = cache --timeout 30000
----

////////////////////
==== Under the Hood
////////////////////
==== 뚜껑을 열어보면

////////////////////
How does this all work?
Git's root command for the credential-helper system is `git credential`, which takes a command as an argument, and then more input through stdin.
////////////////////
실제로는 어떻게 동작하는지 살펴보자.
Git의 Credential-Helper 시스템의 기본 명령은 `git credential` 이다. 이 명령이 하위 명령이나 옵션, 표준입력으로 필요한 정보를 입력받아 전달한다.

////////////////////
This might be easier to understand with an example.
Let's say that a credential helper has been configured, and the helper has stored credentials for `mygithost`.
Here's a session that uses the ``fill'' command, which is invoked when Git is trying to find credentials for a host:
////////////////////
이 과정은 예제를 통해 이해하는 편이 쉽다.
Credential Helper를 사용하도록 설정하고 `mygithost` 라는 호스트의 인증정보가 저장된 상태이다.
아래 예제는 ``fill'' 명령으로 Git이 특정 호스트에 대한 인증정보를 얻으려는 과정을 보여준다.

[source,console]
----
$ git credential fill <1>
protocol=https <2>
host=mygithost
<3>
protocol=https <4>
host=mygithost
username=bob
password=s3cre7
$ git credential fill <5>
protocol=https
host=unknownhost

Username for 'https://unknownhost': bob
Password for 'https://bob@unknownhost':
protocol=https
host=unknownhost
username=bob
password=s3cre7
----

////////////////////
<1> This is the command line that initiates the interaction.
<2> Git-credential is then waiting for input on stdin.
    We provide it with the things we know: the protocol and hostname.
<3> A blank line indicates that the input is complete, and the credential system should answer with what it knows.
<4> Git-credential then takes over, and writes to stdout with the bits of information it found.
<5> If credentials are not found, Git asks the user for the username and password, and provides them back to the invoking stdout (here they're attached to the same console).
////////////////////
<1> 이 명령으로 인증정보를 얻어오는 과정을 시작한다.
<2> 이제 Git-credential 명령은 표준 입력으로 사용자의 입력을 기다린다.
    인증정보가 필요한 대상의 프로토콜과 호스트이름을 입력한다.
<3> 빈 라인을 하나 입력하면 입력이 끝났다는 것을 의미한다. 이제 입력한 내용에 해당하는 인증정보를 응답해야 한다.
<4> Git-credential 명령이 전달받은 내용으로 인증정보를 찾아보고 찾으면 표준출력으로 찾은 정보를 응답한다.
<5> 물론 요청에 대한 인증정보가 없을 수도 있다. 이렇게 되면 Git이 사용자 이름과 비밀번호를 사용자가 입력하도록 메시지를 띄우고 값도 입력받는다. 입력받은 값을 다시 표준출력으로 응답한다.

////////////////////
The credential system is actually invoking a program that's separate from Git itself; which one and how depends on the `credential.helper` configuration value.
There are several forms it can take:
////////////////////
이 Credential 시스템은 사실 Git과 분리된 독립적인 프로그램을 실행시켜 동작한다. 어떤 프로그램을 실행시킬지는 `credential.helper` 설정 값에 따른다.
이 설정 값을 아래와 같이 설정한다.

////////////////////
| Configuration Value | Behavior
| `foo` | Runs `git-credential-foo`
| `foo -a --opt=bcd` | Runs `git-credential-foo -a --opt=bcd`
| `/absolute/path/foo -xyz` | Runs `/absolute/path/foo -xyz`
| `!f() { echo "password=s3cre7"; }; f` | Code after `!` evaluated in shell
////////////////////
[options="header"]
|======
| 설정 값 | 결과
| `foo` | `git-credential-foo` 실행
| `foo -a --opt=bcd` | `git-credential-foo -a --opt=bcd` 실행
| `/absolute/path/foo -xyz` | `/absolute/path/foo -xyz` 실행
| `!f() { echo "password=s3cre7"; }; f` | `!` 뒤의 코드를 쉘에서 실행
|======

////////////////////
So the helpers described above are actually named `git-credential-cache`, `git-credential-store`, and so on, and we can configure them to take command-line arguments.
The general form for this is ``git-credential-foo [args] <action>.''
The stdin/stdout protocol is the same as git-credential, but they use a slightly different set of actions:
////////////////////
따라서 위에서 살펴본 여러 Helper는 사실 `git-credential-cache`, `git-credential-store` 같은 명령이다. 설정을 통해 이 명령들이 옵션이나 하위 명령을 받아서 실행하게 한다.
이 명령의 일반적인 형태는 ``git-credential-foo [args] <action>'' 이다.
`git-credential` 명령과 마찬가지로 표준입력/표준출력을 프로토콜로 사용하지만 처리하는 액션(하위 명령)은 아래와 같이 다소 다르다.

////////////////////
* `get` is a request for a username/password pair.
* `store` is a request to save a set of credentials in this helper's memory.
* `erase` purge the credentials for the given properties from this helper's memory.
////////////////////
* `get` - 사용자 이름과 비밀번호를 요구하는 액션
* `store` - Helper에서 인증정보를 저장하는 액션
* `erase` - Helper에서 인증정보를 삭제하는 액션

////////////////////
For the `store` and `erase` actions, no response is required (Git ignores it anyway).
For the `get` action, however, Git is very interested in what the helper has to say.
If the helper doesn't know anything useful, it can simply exit with no output, but it it does know, it should augment the provided information with the information it has stored.
The output is treated like a series of assignment statements; anything provided will replace what Git already knows.
////////////////////
`store`나 `erase` 액션은 따로 결과를 출력할 필요가 없다(Git은 결과를 무시).
`get` 액션의 결과는 Git이 주의 깊게 관찰해서 가져다 사용하므로 매우 중요하다.
Helper는 전달받은 내용으로 인증정보를 찾고 저장된 인증정보가 없다면 아무런 결과도 출력하지 않고 종료하면 된다. 적당한 인증정보를 찾았을 때는 전달받은 내용에 찾은 인증정보를 추가하여 결과로 응답한다.
결과는 몇 라인의 할당 구문으로 구성하며, Git은 이 결과를 받아서 사용한다.

////////////////////
Here's the same example from above, but skipping git-credential and going straight for git-credential-store:
////////////////////
아래 예제는 위에서 살펴본 예제와 같은 내용으로 `git-crediential` 명령 대신 `git-credential-store` 명령을 직접 사용한다.

[source,console]
----
$ git credential-store --file ~/git.store store <1>
protocol=https
host=mygithost
username=bob
password=s3cre7
$ git credential-store --file ~/git.store get <2>
protocol=https
host=mygithost

username=bob <3>
password=s3cre7
----

////////////////////
<1> Here we tell `git-credential-store` to save some credentials: the username ``bob'' and the password ``s3cre7'' are to be used when `https://mygithost` is accessed.
<2> Now we'll retrieve those credentials.
    We provide the parts of the connection we already know (`https://mygithost`), and an empty line.
<3> `git-credential-store` replies with the username and password we stored above.
////////////////////
<1> `git-credential-store` Helper에게 인증정보를 저장하도록 한다. 저장할 인증정보는 사용자 이름은 ``bob'', 비밀번호는 ``s3cre7''를 저장하는데 프로토콜과 호스트가 `https://mygithost` 일 때 사용한다.
<2> 저장한 인증정보를 가져온다.
    이미 아는 `https://mygithost` 리모트 주소를 호스트와 프로토콜로 나누어 표준입력으로 전달하고 한 라인을 비운다.
<3> `git-credential-store` 명령은 <1>에서 저장한 사용자 이름과 비밀번호를 표준출력으로 응답한다.

////////////////////
Here's what the `~/git.store` file looks like:
////////////////////
`~/git.store` 파일의 내용은 사실 아래와 같다.

[source,ini]
----
https://bob:s3cre7@mygithost
----

////////////////////
It's just a series of lines, each of which contains a credential-decorated URL.
The `osxkeychain` and `wincred` helpers use the native format of their backing stores, while `cache` uses its own in-memory format (which no other process can read).
////////////////////
단순한 텍스트파일로 인증정보가 포함된 URL 형태로 저장한다.
`osxkeychain`이나 `wincred` Helper를 사용하면 OS에서 제공하는 좀 더 안전한 저장소에 인증정보를 저장한다. `cache` Helper의 경우 나름의 형식으로 메모리에 인증정보를 저장하고 다른 프로세스에서는 (메모리의 내용을) 읽어갈 수 없다.

////////////////////
==== A Custom Credential Cache
////////////////////
==== 맞춤 Credential 캐시

////////////////////
Given that `git-credential-store` and friends are separate programs from Git, it's not much of a leap to realize that _any_ program can be a Git credential helper.
The helpers provided by Git cover many common use cases, but not all.
For example, let's say your team has some credentials that are shared with the entire team, perhaps for deployment.
These are stored in a shared directory, but you don't want to copy them to your own credential store, because they change often.
None of the existing helpers cover this case; let's see what it would take to write our own.
There are several key features this program needs to have:
////////////////////
`git-credential-store`나 다른 명령도 독립된 프로그램이다. **아무** 스크립트나 프로그램도 Git Credential Helper가 될 수 있다.
이미 Git이 제공하는 Helper로도 충분하지만 모든 경우를 커버하지 않는다.
예를 들어 어떤 인증정보는 팀 전체가 공유해야 한다. 배포에 사용하는 인증정보가 그렇다.
이 인증정보는 공유하는 디렉토리에 저장해두고 사용한다. 이 인증정보는 자주 변경되기 때문에 로컬 Credential 저장소에 저장하지 않고 사용하고자 한다.
이런 경우라면 Git이 제공하는 Helper로는 부족하며 자신만의 맞춤 Helper가 필요하다.
맞춤 Helper는 아래와 같은 기능을 제공해야 한다.

////////////////////
. The only action we need to pay attention to is `get`; `store` and `erase` are write operations, so we'll just exit cleanly when they're received.
. The file format of the shared-credential file is the same as that used by `git-credential-store`.
. The location of that file is fairly standard, but we should allow the user to pass a custom path just in case.
////////////////////
. 새 맞춤 Helper가 집중해야 할 액션은 `get` 뿐이다. `store`나 `erase` 액션은 저장하는 기능이기 때문에 이 액션을 받으면 깔끔하게 바로 종료한다.
. 공유하는 Credential 파일은 `git-credential-store` 명령이 저장하는 형식과 같은 형식을 사용한다.
. Credential 파일의 위치는 기본 값을 사용해도 되지만 파일 경로를 넘길 수 있다.

////////////////////
Once again, we'll write this extension in Ruby, but any language will work so long as Git can execute the finished product.
Here's the full source code of our new credential helper:
////////////////////
예제로 보여주는 맞춤 Helper도 Ruby로 작성한다. 하지만, 다른 어떤 언어를 사용해도 Git이 실행할 수만 있다면 상관없다.
작성한 저장소 Helper의 소스코드는 아래와 같다.

[source,ruby]
--------
include::../git-credential-read-only[]
--------

////////////////////
<1> Here we parse the command-line options, allowing the user to specify the input file. The default is `~/.git-credentials`.
<2> This program only responds if the action is `get` and the backing-store file exists.
<3> This loop reads from stdin until the first blank line is reached.
    The inputs are stored in the `known` hash for later reference.
<4> This loop reads the contents of the storage file, looking for matches.
    If the protocol and host from `known` match this line, the program prints the results to stdout and exits.
////////////////////
<1> 우선 명령 옵션을 처리한다. 옵션으로는 Credential 파일명이 들어온다. 기본 값은 `~/.git-credentials` 이다.
<2> Helper 프로그램은 `get` 액션만 처리하며 Credential 파일이 존재하는 경우만 처리한다.
<3> 이후에는 빈 라인이 나타날 때까지 표준입력으로부터 한 줄 한 줄 읽는다.
    각 라인을 파싱하여 `known` 해시에 저장하고 <4>의 응답에서 사용한다.
<4> 이 루프에서 Credential 파일을 읽어서 <3>의 해시에 해당하는 정보를 찾는다.
    `known` 해시에서 프로토콜과 호스트 정보가 일치하는 경우 사용자 이름과 비밀번호를 포함하여 결과를 출력한다.

////////////////////
We'll save our helper as `git-credential-read-only`, put it somewhere in our `PATH` and mark it executable.
Here's what an interactive session looks like:
////////////////////
이 파일을 `git-credential-read-only`로 저장하고 `PATH`에 등록된 디렉토리 중 하나에 위치시키고 실행 권한을 부여한다.
Helper를 실행하면 아래와 같다.

[source,console]
----
$ git credential-read-only --file=/mnt/shared/creds get
protocol=https
host=mygithost

protocol=https
host=mygithost
username=bob
password=s3cre7
----

////////////////////
Since its name starts with ``git-'', we can use the simple syntax for the configuration value:
////////////////////
위에서 저장한 파일 이름이 ``git-'' 으로 시작하기 때문에 아래와 같이 간단한 이름으로 설정해서 사용할 수 있다.

[source,console]
----
$ git config --global credential.helper 'read-only --file /mnt/shared/creds'
----

////////////////////
As you can see, extending this system is pretty straightforward, and can solve some common problems for you and your team.
////////////////////
이렇게 살펴본 대로 Credential 저장소를 필요에 따라 맞춤 프로그램을 작성해서 확장하는 것이 어렵지 않다. 스크립트를 만들어 사용자나 팀의 가려운 부분을 긁어줄 수 있다.

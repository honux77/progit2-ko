[[_searching]]
//////////////////////////
=== Searching
//////////////////////////
=== 검색

//////////////////////////
With just about any size codebase, you'll often need to find where a function is called or defined, or find the history of a method.
Git provides a couple of useful tools for looking through the code and commits stored in its database quickly and easily.
We'll go through a few of them.
//////////////////////////
프로젝트가 크든 작든 함수의 정의나 함수가 호출되는 곳을 검색해야 하는 경우가 많다. 함수의 히스토리를 찾아보기도 한다.
Git은 데이터베이스에 저장된 코드나 커밋에서 원하는 부분을 빠르고 쉽게 검색하는 도구가 여러 가지 있으며
앞으로 함께 살펴보자.

[[_git_grep]]
==== Git Grep

//////////////////////////
Git ships with a command called `grep` that allows you to easily search through any committed tree or the working directory for a string or regular expression.
For these examples, we'll look through the Git source code itself.
//////////////////////////
Git의 `grep` 명령을 이용하면 커밋 트리의 내용이나 워킹 디렉토리의 내용을 문자열이나 정규표현식을 이용해 쉽게 찾을 수 있다.
Git 소스를 예로 들어 명령을 어떻게 사용하는지 알아보자.

//////////////////////////
By default, it will look through the files in your working directory.
You can pass `-n` to print out the line numbers where Git has found matches.
//////////////////////////
기본적으로 대상을 지정하지 않으면 워킹 디렉토리의 파일에서 찾는다.
명령을 실행할 때 `-n` 옵션을 추가하면 찾을 문자열이 위치한 라인 번호도 같이 출력한다.

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:429:             if (gmtime_r(&now, &now_tm))
date.c:492:             if (gmtime_r(&time, tm)) {
git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:723:#define gmtime_r git_gmtime_r
----

//////////////////////////
There are a number of interesting options you can provide the `grep` command.
//////////////////////////
`grep` 명령에서 쓸만한 몇 가지 옵션을 좀 더 살펴보자.

//////////////////////////
For instance, instead of the previous call, you can have Git summarize the output by just showing you which files matched and how many matches there were in each file with the `--count` option:
//////////////////////////
예를 들어 위의 결과 대신 어떤 파일에서 몇 개나 찾았는지만 알고 싶다면 `--count`옵션을 이용한다.

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:2
git-compat-util.h:2
----

//////////////////////////
If you want to see what method or function it thinks it has found a match in, you can pass `-p`:
//////////////////////////
매칭되는 라인이 있는 함수나 메서드를 찾고 싶다면 `-p` 옵션을 준다.

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
----

//////////////////////////
So here we can see that `gmtime_r` is called in the `match_multi_number` and `match_digit` functions in the date.c file.
//////////////////////////
`gmtime_r` 함수를 date.c 파일에서 `match_multi_number`, `match_digit` 함수에서 호출하고 있다는 걸 확인할 수 있다.

//////////////////////////
You can also look for complex combinations of strings with the `--and` flag, which makes sure that multiple matches are in the same line.
For instance, let's look for any lines that define a constant with either the strings ``LINK'' or ``BUF_MAX'' in them in the Git codebase in an older 1.8.0 version.
//////////////////////////
`--and` 옵션을 이용해서 여러 단어가 한 라인에 동시에 나타나는 줄 찾기 같은 복잡한 조합으로 검색할 수 있다.
예를 들어 ``LINK''나 ``BUF_MAX'' 둘 중 하나를 포함한 상수 정의를 1.8.0 이전 버전의 Git 소스 코드에서 검색하는 것을 할 수 있다.

//////////////////////////
Here we'll also use the `--break` and `--heading` options which help split up the output into a more readable format.
//////////////////////////
`--break`와 `--heading` 옵션을 붙여 더 읽기 쉬운 형태로 잘라서 출력할 수도 있다.

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

//////////////////////////
The `git grep` command has a few advantages over normal searching commands like `grep` and `ack`.
The first is that it's really fast, the second is that you can search through any tree in Git, not just the working directory.
As we saw in the above example, we looked for terms in an older version of the Git source code, not the version that was currently checked out.
//////////////////////////
`git grep` 명령은 `grep` 이나 `ack` 같은 일반적인 검색 도구보다 몇 가지 좋은 점이 있다.
우선 매우 빠르다. 또한, 워킹 디렉토리만이 아니라 Git 히스토리 내의 어떠한 정보라도 찾아낼 수 있다.
위의 예제에서 이전 버전의 소스에서도 특정 단어를 찾아낸 것을 볼 수 있다.

//////////////////////////
==== Git Log Searching
//////////////////////////
==== Git 로그 검색

//////////////////////////
Perhaps you're looking not for *where* a term exists, but *when* it existed or was introduced. The `git log` command has a number of powerful tools for finding specific commits by the content of their messages or even the content of the diff they introduce.
//////////////////////////
어떤 변수가 **어디에** 있는지를 찾아보는 게 아니라, 히스토리에서 **언제** 추가되거나 변경됐는지 찾아볼 수도 있다. `git log` 명령을 이용하면 Diff 내용도 검색하여 어떤 커밋에서 찾고자 하는 내용을 추가했는지 찾을 수 있다.

//////////////////////////
If we want to find out for example when the `ZLIB_BUF_MAX` constant was originally introduced, we can tell Git to only show us the commits that either added or removed that string with the `-S` option.
//////////////////////////
`ZLIB_BUF_MAX` 라는 상수가 가장 처음 나타난 때를 찾는 문제라면 `-S` 옵션을 이용해 해당 문자열이 추가된 커밋과 없어진 커밋만 검색할 수 있다.

[source,console]
----
$ git log -SZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time
----

//////////////////////////
If we look at the diff of those commits we can see that in `ef49a7a` the constant was introduced and in `e01503b` it was modified.
//////////////////////////
위 두 커밋의 변경 사항을 살펴보면 `ef49a7a`에서 `ZLIB_BUF_MAX` 상수가 처음 나오고 `e01503b` 에서는 변경된 것을 알 수 있다.

//////////////////////////
If you need to be more specific, you can provide a regular expression to search for with the `-G` option.
//////////////////////////
더 세세한 조건을 걸어 찾고 싶다면 로그를 검색할 때 `-G` 옵션으로 정규표현식을 써서 검색하면 된다.

//////////////////////////
===== Line Log Search
//////////////////////////
===== 라인 로그 검색

//////////////////////////
Another fairly advanced log search that is insanely useful is the line history search.
This is a fairly recent addition and not very well known, but it can be really helpful.
It is called with the `-L` option to `git log` and will show you the history of a function or line of code in your codebase.
//////////////////////////
진짜 미친 듯이 좋은 로그 검색 도구가 또 있다. 라인 히스토리 검색이다.
비교적 최근에 추가된 기능이어서 잘 알려지진 않았지만, 진짜 좋다.
`git log`를 쓸 때 `-L` 옵션을 붙이면 어떤 함수나 한 라인의 히스토리를 볼 수 있다.

//////////////////////////
For example, if we wanted to see every change made to the function `git_deflate_bound` in the `zlib.c` file, we could run `git log -L :git_deflate_bound:zlib.c`.
This will try to figure out what the bounds of that function are and then look through the history and show us every change that was made to the function as a series of patches back to when the function was first created.
//////////////////////////
예를 들어, `zlib.c` 파일에 있는 `git_deflate_bound` 함수의 모든 변경 사항들을 보길 원한다고 생각해보자. `git log -L :git_deflate_bound:zlib.c` 라고 명령 실행하면 된다.
이 명령을 실행하면 함수의 시작과 끝을 인식해서 함수에서 일어난 모든 히스토리를 함수가 처음 만들어진 때부터 Patch를 나열하여 보여준다.

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

//////////////////////////
If Git can't figure out how to match a function or method in your programming language, you can also provide it a regex.
For example, this would have done the same thing: `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`.
You could also give it a range of lines or a single line number and you'll get the same sort of output.
//////////////////////////
Git이 함수의 처음과 끝을 인식하지 못할 때는 정규표현식으로 인식하게 할 수도 있다.
`git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c` 명령으로 위와 같은 결과를 볼 수 있다.
한 라인의 히스토리만 검색할 수도 있고 여러 라인에 걸친 히스토리를 검색할 수도 있다.

[[_git_notes]]
=== Notes

One of the cool things about Git is that it has strong cryptographic integrity.  If you change any bit in the commit data or any of the files it keeps, all the checksums change, including the commit SHA and every commit SHA since that one.  However, that means that in order to amend the commit in any way, for instance to add some comments on something or even sign off on a commit, you have to change the SHA of the commit itself.

Wouldn't it be nice if you could add data to a commit without changing its SHA? For this purpose, Git has a mechanism called `git notes` to attach data to a commit without modifying the commit message itself.

To add a note to a specific commit, you only need to run `git notes add [commit]`, like this:

[source,console]
----
$ git notes add HEAD
----

This will open up your editor to write your note message.  You can also use the `-m` option to provide the note right on the command line:

[source,console]
----
$ git notes add -m 'I approve - Scott' master~1
----

That will add a note to the first parent on the last commit on the master branch.  Now, how to view these notes?  The easiest way is with the `git log` command.

[source,console]
----
$ git log master
commit 0385bcc3bc66d1b1ec07346c237061574335c3b8
Author: Ryan Tomayko <rtomayko@gmail.com>
Date:   Tue Jun 22 20:09:32 2010 -0700

  yield to run block right before accepting connections

commit 06ca03a20bb01203e2d6b8996e365f46cb6d59bd
Author: Ryan Tomayko <rtomayko@gmail.com>
Date:   Wed May 12 06:47:15 2010 -0700

  no need to delete these header names now

Notes:
  I approve - Scott
----

You can see the notes appended automatically in the log output.  You can only have one note per commit in a namespace though (I will explain namespaces in the next section), so if you want to add a note to that commit, you have to instead edit the existing one.  You can either do this by running:

[source,console]
----
$ git notes edit master~1
----

Which will open a text editor with the existing note so you can edit it:

[source,console]
----
I approve - Scott

#
# Write/edit the notes for the following object:
#
# commit 06ca03a20bb01203e2d6b8996e365f46cb6d59bd
# Author: Ryan Tomayko <rtomayko@gmail.com>
# Date:   Wed May 12 06:47:15 2010 -0700
#
#     no need to delete these header names now
#
#  kidgloves.rb |    2 --
#  1 files changed, 0 insertions(+), 2 deletions(-)
~
~
~
".git/NOTES_EDITMSG" 13L, 338C
----

If you just want to add something to the end of an existing note, you can run `git notes append SHA`.

Finally, you can give it a file with the content you want to add as a note with the `-F` flag. This could be useful for adding larger pieces of content to commits, perhaps emails or build output.

=== Notes Namespaces

Since you can only have one note per commit, Git allows you to have multiple namespaces for your notes.  The default namespace is called ``commits'', but you can change that.  Let's say we're using the ``commits'' notes namespace to store general comments but we want to also store bugzilla information for our commits.  We can also have a ``bugzilla'' namespace.  Here is how we would add a bug number to a commit under the bugzilla namespace:

[source,console]
----
$ git notes --ref=bugzilla add -m 'bug #15' 0385bcc3
----

However, now you have to tell Git to specifically look in that namespace with the `--notes` flag:

[source,console]
----
$ git log --notes=bugzilla
commit 0385bcc3bc66d1b1ec07346c237061574335c3b8
Author: Ryan Tomayko <rtomayko@gmail.com>
Date:   Tue Jun 22 20:09:32 2010 -0700

  yield to run block right before accepting connections

Notes (bugzilla):
  bug #15

commit 06ca03a20bb01203e2d6b8996e365f46cb6d59bd
Author: Ryan Tomayko <rtomayko@gmail.com>
Date:   Wed May 12 06:47:15 2010 -0700

  no need to delete these header names now

----

Notice that it will only show notes from the namespace you designate. You can pass the option multiple times to see notes from multiple namespaces. You can also have it show notes from all your namespaces by running `git log --notes=*`.  Here is what your log output might look like if you have a number of notes namespaces:

[source,console]
----
$ git log -1 --notes=*
commit 0385bcc3bc66d1b1ec07346c237061574335c3b8
Author: Ryan Tomayko <rtomayko@gmail.com>
Date:   Tue Jun 22 20:09:32 2010 -0700

    yield to run block right before accepting connections

Notes:
    I approve of this, too - Scott

Notes (bugzilla):
    bug #15

Notes (build):
    build successful (8/13/10)
----

You can also switch the current namespace you're using so that the default for writing and showing notes is not 'commits' but, say, 'bugzilla' instead. This is done with the `core.notesRef` configuration variable. For instance you could run this to change the default:

[source,console]
----
$ git config core.notesRef refs/notes/bugzilla
----

[[_sharing_notes]]
=== Sharing Notes

The notes (as you may have noticed in the previous section) are stored as references, just like branches and tags. This means you can push them to a server. However, Git has a bit of magic built in to expand a branch name like `master` to it's full name, which is `refs/heads/master`. Unfortunately, Git has no such magic built in for notes. So to push your notes to a server you cannot simply run something like `git push origin bugzilla`. Git will do
this:

[source,console]
----
$ git push origin bugzilla
error: src refspec bugzilla does not match any.
error: failed to push some refs to 'https://github.com/schacon/kidgloves'
----

However, you can push anything under `refs/` to a server, you just need to be more explicit about it.  If you run this it will work fine:

[source,console]
----
$ git push origin refs/notes/bugzilla
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 263 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/schacon/kidgloves
 * [new branch]      refs/notes/bugzilla -> refs/notes/bugzilla
----

In fact, you may want to just make that `git push origin refs/notes/*` which will push all your notes.  This is what Git does normally for something like tags.  When you run `git push origin --tags` it basically expands to `git push origin refs/tags/*`.

[[_getting_notes]]
==== Getting Notes

Unfortunately, getting notes is even more difficult. Notes do not come down with a clone and there nothing like `git fetch --notes`. In order to fetch notes, you have to specify both sides of the refspec.

[source,console]
----
$ git fetch origin refs/notes/*:refs/notes/*
remote: Counting objects: 12, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 12 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (12/12), done.
From github.com:schacon/kidgloves
 * [new branch]      refs/notes/bugzilla -> refs/notes/bugzilla
----

That is basically the only way to get them into your repository from the server. What is probably more common is to setup your Git config file to automatically pull them down when you fetch. If you look at your `.git/config` file you should have a section that looks like this:

[source,console]
----
[remote "origin"]
  fetch = +refs/heads/*:refs/remotes/origin/*
  url = https://github.com/schacon/kidgloves
----

The 'fetch' line is the refspec of what Git will try to do if you run just `git fetch origin`. It contains the magic formula of what Git will fetch and store local references to. For instance, in this case it will take every branch on the server and give you a local branch under 'remotes/origin/' so you can reference the 'master' branch on the server as 'remotes/origin/master' or just 'origin/master' (it will look under 'remotes' when it's trying to figure out what you're doing).  If you change that line to `fetch = +refs/heads/*:refs/remotes/manamana/*` then even though your remote is named 'origin', the master branch from your 'origin' server will be under 'manamana/master'.

You can use this to make your notes fetching easier. If you add multiple `fetch` lines, it will do them all. So in addition to the current `fetch` line, you can add a line that looks like this:

[source,console]
----
fetch = +refs/notes/*:refs/notes/*
----

Which says also get all the notes references on the server and store them as though they were local notes.

=== Collaborating on Notes

[source,console]
----
[remote "origin"]
	url = git@github.com:schacon/test.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[remote "notes"]
	url = git@github.com:schacon/test.git
	fetch = +refs/notes/*:refs/remote-notes/origin/*
	push  = refs/notes/*:refs/notes/*
----

[source,console]
----
$ git push notes
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 267 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/test.git
 * [new branch]      refs/notes/commits -> refs/notes/commits
----

[source,console]
----
$ git fetch notes
From github.com:schacon/test
 * [new ref]         refs/notes/commits -> refs/remote-notes/origin/commits
----

[source,console]
----
$ git notes append -m 'my note' 1871649b61b87864c64bd0d7c9c2c88523968f6c
----

[source,console]
----
$ git push notes
To git@github.com:schacon/test.git
 ! [rejected]        refs/notes/commits -> refs/notes/commits (non-fast-forward)
error: failed to push some refs to 'git@github.com:schacon/test.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e.g. 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
----

[source,console]
----
$ git notes merge refs/remote-notes/origin/commits
Fast-forward
----

TODO: I can't get `git notes merge` to work at all. May have to drop this section.

So far, I've heard of people using them to have their ticketing system attach metadata automatically or have <a href="http://article.gmane.org/gmane.comp.version-control.git/109074">a system</a> attach associated mailing list emails to commits they concern. Other people just use them entirely locally without pushing them anywhere to store reminders for themselves and whatnot. Probably a good start, but the ambitious among you may come up with something else interesting to do.  Let me know!

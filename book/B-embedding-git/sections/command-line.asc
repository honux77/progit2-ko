//////////////////////////
=== Command-line Git
//////////////////////////
=== Git 명령어

//////////////////////////
One option is to spawn a shell process and use the Git command-line tool to do the work.
This has the benefit of being canonical, and all of Git's features are supported.
This also happens to be fairly easy, as most runtime environments have a relatively simple facility for invoking a process with command-line arguments.
However, this approach does have some downsides.
//////////////////////////
쉘 프로세스를 띄우고(Spawn) Git 명령어를 실행하는 방법이 있다.
이게 가장 표준적인 방법으로 Git의 모든 기능을 사용할 수 있다.
웬만한 환경에서는 명령어를 프로세스로 실행하는 것은 간단하므로 이 방법은 사용하기 쉬운 편이다.
그러나 이 방법은 몇 가지 제약사항이 있다.

//////////////////////////
One is that all the output is in plain text.
This means that you'll have to parse Git's occasionally-changing output format to read progress and result information, which can be inefficient and error-prone.
//////////////////////////
첫째는 결과가 텍스트로 출력된다.
Git이 상황에 따라 다르게 출력하는 결과를 파싱해야 한다. 진행상태와 결과 정보를 구분해서 잘 읽어야 해서 어렵고 에러 나기 쉽다.

//////////////////////////
Another is the lack of error recovery.
If a repository is corrupted somehow, or the user has a malformed configuration value, Git will simply refuse to perform many operations.
//////////////////////////
둘째는 에러 처리가 어렵다.
저장소가 깨져 있거나 사용자가 잘못 설정했을 때 Git은 그냥 제대로 실행되지 않을 뿐이다.

//////////////////////////
Yet another is process management.
Git requires you to maintain a shell environment on a separate process, which can add unwanted complexity.
Trying to coordinate many of these processes (especially when potentially accessing the same repository from several processes) can be quite a challenge.
//////////////////////////
마지막 결점은 프로세스를 관리해야 한다는 점이다.
별도의 프로세스로 Git을 실행하기 때문에 애플리케이션에 불필요한 복잡성이 추가된다.
여러 프로세스를 조종하는 일은 지뢰밭이라 할 수 있다. 특히 동시에 여러 프로세스가 한 저장소에 접근하면 `!@#$%^&*`되기 쉽다.

=== JGit

(((jgit)))(((java)))
//////////////////////////
If you want to use Git from within a Java program, there is a fully featured Git library called JGit.
JGit is a relatively full-featured implementation of Git written natively in Java, and is widely used in the Java community.
The JGit project is under the Eclipse umbrella, and its home can be found at http://www.eclipse.org/jgit[].
//////////////////////////
Java에는 JGit이라는 훌륭한 Git 라이브러리가 있다.
JGit에는 Git 기능이 한가득 구현돼 있다. 순수하게 Java로 작성됐고 Java 커뮤니티에서 널리 사용한다.
The JGit 프로젝트는 Eclipse 재단에 둥지를 틀었고 홈페이지는  http://www.eclipse.org/jgit[]에 있다.

//////////////////////////
==== Getting Set Up
//////////////////////////
==== 설치하기

//////////////////////////
There are a number of ways to connect your project with JGit and start writing code against it.
Probably the easiest is to use Maven – the integration is accomplished by adding the following snippet to the `<dependencies>` tag in your pom.xml file:
//////////////////////////
JGit을 프로젝트에 추가해서 코딩을 시작하는 방법은 여러 가지다.
그중 Maven을 사용하는 방법이 가장 쉽다. pom.xml 파일에 `<dependencies>` 태그를 아래와 같이 추가한다.

[source,xml]
----
<dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>3.5.0.201409260305-r</version>
</dependency>
----

//////////////////////////
The `version` will most likely have advanced by the time you read this; check http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit[] for updated repository information.
Once this step is done, Maven will automatically acquire and use the JGit libraries that you'll need.
//////////////////////////
`version`은 시간에 따라 올라갈 것이기 때문에 http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit[]에서 최신 버전을 확인해야 한다.
추가하면 Maven이 우리가 명시한 버전의 JGit을 자동으로 추가해준다.

//////////////////////////
If you would rather manage the binary dependencies yourself, pre-built JGit binaries are available from http://www.eclipse.org/jgit/download[].
You can build them into your project by running a command like this:
//////////////////////////
반면 수동으로 바이너리를 관리하고 싶을 수도 있다. http://www.eclipse.org/jgit/download[] 에서 빌드된 바이너리를 내려받는다.
이 바이너리를 이용해서 아래와 같이 컴파일할 수 있다:

[source,console]
----
javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java
java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App
----

==== Plumbing

//////////////////////////
JGit has two basic levels of API: plumbing and porcelain.
The terminology for these comes from Git itself, and JGit is divided into roughly the same kinds of areas: porcelain APIs are a friendly front-end for common user-level actions (the sorts of things a normal user would use the Git command-line tool for), while the plumbing APIs are for interacting with low-level repository objects directly.
//////////////////////////
JGit의 API는 크게 Plumbing과 Porcelain으로 나눌 수 있다.
이 둘은 Git 용어이고 JGit도 이에 따라 나눈다. 일반 사용자가 사용하는 Git 명령어를 Porcelain 명령어라고 부르는데 이와 관련된 API도 Procelain API라고 부른다. 반대로 Plumbing API는 저장소 개체를 저수준에서 직접 사용하는 API다.

//////////////////////////
The starting point for most JGit sessions is the `Repository` class, and the first thing you'll want to do is create an instance of it.
For a filesystem-based repository (yes, JGit allows for other storage models), this is accomplished using `FileRepositoryBuilder`:
//////////////////////////
JGit을 사용하는 것은 `Repository` 클래스의 인스턴스를 만드는 것으로 시작한다.
파일 시스템에 있는 저장소에 접근할 때는 `FileRepostiorybuilder`를 사용한다.

[source,java]
----
// Create a new repository
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    new File("/tmp/new_repo/.git"));
newlyCreatedRepo.create();

// Open an existing repository
Repository existingRepo = new FileRepositoryBuilder()
    .setGitDir(new File("my_repo/.git"))
    .build();
----

//////////////////////////
The builder has a fluent API for providing all the things it needs to find a Git repository, whether or not your program knows exactly where it's located.
It can use environment variables (`.readEnvironment()`), start from a place in the working directory and search (`.setWorkTree(…).findGitDir()`), or just open a known `.git` directory as above.
//////////////////////////
Git 저장소를 나타내는 정보를 하나씩 이 빌더 넘긴다. 넘기는 정보에 따라 조금 다른 API를 사용한다.
환경 변수를 읽고(`.readEnvironment()`) 워킹 디렉토리를 주고 Git 디렉토리를 찾을 수도 있고(`.setWorkTree(…).findGitDir()`) 예제로 보여준 것처럼 아예 `.git` 디렉토리를 바로 넘겨 줄 수도 있다.

//////////////////////////
Once you have a `Repository` instance, you can do all sorts of things with it.
Here's a quick sampling:
//////////////////////////
`Repository` 인스턴스를 기점으로 온갖 일을 다 할 수 있다.
예제를 하나 보자.

[source,java]
----
// Get a reference
Ref master = repo.getRef("master");

// Get the object the reference points to
ObjectId masterTip = master.getObjectId();

// Rev-parse
ObjectId obj = repo.resolve("HEAD^{tree}");

// Load raw object contents
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

// Create a branch
RefUpdate createBranch1 = repo.updateRef("refs/heads/branch1");
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

// Delete a branch
RefUpdate deleteBranch1 = repo.updateRef("refs/heads/branch1");
deleteBranch1.setForceUpdate(true);
deleteBranch1.delete();

// Config
Config cfg = repo.getConfig();
String name = cfg.getString("user", null, "name");
----

//////////////////////////
There's quite a bit going on here, so let's go through it one section at a time.
//////////////////////////
이 예제가 어떤 뜻인지 하나씩 살펴보자.

//////////////////////////
The first line gets a pointer to the `master` reference.
JGit automatically grabs the _actual_ master ref, which lives at `refs/heads/master`, and returns an object that lets you fetch information about the reference.
You can get the name (`.getName()`), and either the target object of a direct reference (`.getObjectId()`) or the reference pointed to by a symbolic ref (`.getTarget()`).
Ref objects are also used to represent tag refs and objects, so you can ask if the tag is ``peeled,'' meaning that it points to the final target of a (potentially long) string of tag objects.
//////////////////////////
첫 라인에서 `master` Ref를 얻었다.
Jgit은 `refs/heads/master`에 있는 _진짜_ master Ref를 가져와서 인스턴스를 리턴한다. 이 객체로 Ref에 대한 정보를 얻을 수 있다.
이름(`.getName()`), Ref가 가리키는 개체(`.getObjectId()`), Symbolic Ref가 가리키는 Ref(`.getTarget()`)를 이 객체로 얻을 수 있다.
Ref 인스턴스는 태그 Ref와 개체를 나타내고 태그가 ``Peeled''인지도 확인할 수 있다. ``Peeled''은 껍질을 다 벗긴 상태 그러니까 커밋 개체를 가리키는 상태를 말한다.

//////////////////////////
The second line gets the target of the `master` reference, which is returned as an ObjectId instance.
ObjectId represents the SHA-1 hash of an object, which might or might not exist in Git's object database.
The third line is similar, but shows how JGit handles the rev-parse syntax (for more on this, see <<_branch_references>>); you can pass any object specifier that Git understands, and JGit will return either a valid ObjectId for that object, or `null`.
//////////////////////////
두 번째 라인은 `master`가 가리키는 ObjectId 인스턴스를 리턴한다.
ObjectId는 객체의 SHA-1 해시 정보다. 실제로 객체가 Git 객체 데이터베이스에 존재하는지는 상관없다.
셋째 라인도 ObjectId 인스턴스를 리턴하는데 JGit에서 rev-parse 문법을 어떻게 다뤄야 하는지 보여준다. 이 문법은 <<_branch_references>>에서 설명했다. Git이 이해하는 표현은 전부 사용 가능하다. 표현식이 맞으면 해당 객체를 리턴하고 아니면 null을 리턴한다.

//////////////////////////
The next two lines show how to load the raw contents of an object.
In this example, we call `ObjectLoader.copyTo()` to stream the contents of the object directly to stdout, but ObjectLoader also has methods to read the type and size of an object, as well as return it as a byte array.
For large objects (where `.isLarge()` returns `true`), you can call `.openStream()` to get an InputStream-like object that can read the raw object data without pulling it all into memory at once.
//////////////////////////
그다음 두 라인은 객체의 내용을 읽어서 보여준다.
`ObjectLoader.copyTo()` 함수로 객체의 내용을 표준출력으로 출력(Stream)했다. ObjectLoader에는 객체의 타입과 크기를 알려주거나 객체의 내용을 바이트 배열에 담아서 리턴하는 메소드도 있다.
파일이 큰지도 확인할 수 있다. `.isLarge()`라는 메소드가 `true`를 리턴하면 큰 파일이다. 큰 파일이면 `.openStream()`호출해서 `ObjectStream` 인스턴스를 얻는다. 이 인스턴스는 일종의 InputStream으로 한 번에 전부 메모리로 올리지 않고 데이터를 처리할 수 있게 해준다.

//////////////////////////
The next few lines show what it takes to create a new branch.
We create a RefUpdate instance, configure some parameters, and call `.update()` to trigger the change.
Directly following this is the code to delete that same branch.
Note that `.setForceUpdate(true)` is required for this to work; otherwise the `.delete()` call will return `REJECTED`, and nothing will happen.
//////////////////////////
그다음 몇 라인은 새 브랜치를 만드는 것을 보여준다.
RefUpdate 인스턴스를 만들고, 파라미터를 설정하고 나서 `.update()`를 호출하면 브랜치가 생성된다.
그다음 몇 라인은 만든 브랜치를 삭제하는 코드다.
`.setForceUpdate(true)`는 꼭 필요하다. 이것을 빼먹으면 `.delete()`는 `REJECTED`를 리턴하고 아무 일도 일어나지 않는다.

//////////////////////////
The last example shows how to fetch the `user.name` value from the Git configuration files.
This Config instance uses the repository we opened earlier for local configuration, but will automatically detect the global and system configuration files and read values from them as well.
//////////////////////////
마지막 예제는 `user.name`이라는 설정 값을 가져오는 것이다.
이 코드는 마치 해당 저장소의 local 설정만 읽어서 Config 객체를 리턴하는 것 같지만, global 설정과 system 설정까지 잘 찾아서 적용해준다.

//////////////////////////
This is only a small sampling of the full plumbing API; there are many more methods and classes available.
Also not shown here is the way JGit handles errors, which is through the use of exceptions.
JGit APIs sometimes throw standard Java exceptions (such as `IOException`), but there are a host of JGit-specific exception types that are provided as well (such as `NoRemoteRepositoryException`, `CorruptObjectException`, and `NoMergeBaseException`).
//////////////////////////
여기서는 Plumbing API의 맛보기 정도만 보여줬다. 이용 가능한 메소드와 클래스가 많이 있다.
그리고 JGit의 에러를 처리하는 방법도 생략했다.
JGIT API에서는 JGit에서 정의한 `NoRemoteRepositoryException`, `CorruptObjectException`, `NoMergeBaseException` 같은 예외뿐만 아니라 `IOExceptioin` 같은 Java 표준 예외도 던진다.

==== Porcelain

//////////////////////////
The plumbing APIs are rather complete, but it can be cumbersome to string them together to achieve common goals, like adding a file to the index, or making a new commit.
JGit provides a higher-level set of APIs to help out with this, and the entry point to these APIs is the `Git` class:
//////////////////////////
Plumbing API로도 모든 일을 다 할 수 있지만, 일반적인 상황에 사용하기에는 좀 귀찮다. Index에 파일을 추가하거나 새로 커밋하는 것 같은 일은 Porcelain API가 낫다.
Porcelain API는 고수준에서 사용하기 편하게 했고 `Git` 클래스의 인스턴스를 만드는 것으로 시작한다.

[source,java]
----
Repository repo;
// construct repo...
Git git = new Git(repo);
----

//////////////////////////
The Git class has a nice set of high-level _builder_-style methods that can be used to construct some pretty complex behavior.
Let's take a look at an example – doing something like `git ls-remote`:
//////////////////////////
Git 클래스는 _빌더_ 스타일의 메소드의 집합이라서 복잡해 보이는 일을 쉽게 할 수 있다.
`git ls-remote` 명령어처럼 동작하는 예제를 살펴보자.

[source,java]
----
CredentialsProvider cp = new UsernamePasswordCredentialsProvider("username", "p4ssw0rd");
Collection<Ref> remoteRefs = git.lsRemote()
    .setCredentialsProvider(cp)
    .setRemote("origin")
    .setTags(true)
    .setHeads(false)
    .call();
for (Ref ref : remoteRefs) {
    System.out.println(ref.getName() + " -> " + ref.getObjectId().name());
}
----

//////////////////////////
This is a common pattern with the Git class; the methods return a command object that lets you chain method calls to set parameters, which are executed when you call `.call()`.
In this case, we're asking the `origin` remote for tags, but not heads.
Also notice the use of a `CredentialsProvider` object for authentication.
//////////////////////////
Git 클래스는 이런 식으로 사용한다. 메소드가 해당 Command 인스턴스를 리턴하면 체이닝으로 메소드를 호출해서 파라미터를 설정하고 `.call()`을 호출하는 시점에 실제로 실행된다.
이 예제는 `origin` 리모트의 'tag'를 요청하는 예제다. 'head'는 빼고 요청한다.
사용자 인증은 `CredentialsProvider` 객체를 사용한다는 점을 기억하자.

//////////////////////////
Many other commands are available through the Git class, including but not limited to `add`, `blame`, `commit`, `clean`, `push`, `rebase`, `revert`, and `reset`.
//////////////////////////
Git 클래스로 실행하는 명령은 매우 많다. 우리에게 익숙한 `add`, `blame`, `commit`, `clean`, `push`, `rebase`, `revert`, `reset` 명령 말고도 많다.

//////////////////////////
==== Further Reading
//////////////////////////
==== 읽을거리

//////////////////////////
This is only a small sampling of JGit's full capabilities.
If you're interested and want to learn more, here's where to look for information and inspiration:
//////////////////////////
여기서는 JGit을 아주 조금만 보여줬다.
자세히 알고 싶다면 아래 링크에서 도움받을 수 있다.

//////////////////////////
* The official JGit API documentation is available online at http://download.eclipse.org/jgit/docs/latest/apidocs[].
  These are standard Javadoc, so your favorite JVM IDE will be able to install them locally, as well.
* The JGit Cookbook at https://github.com/centic9/jgit-cookbook[] has many examples of how to do specific tasks with JGit.
* There are several good resources pointed out at http://stackoverflow.com/questions/6861881[].
//////////////////////////
* 공식 JGit API 문서: http://download.eclipse.org/jgit/docs/latest/apidocs[]
  표준 Javadoc 문서로 즐겨 쓰는 JVM IDE에 추가할 수 있다.
* JGit Cookbook: https://github.com/centic9/jgit-cookbook[]
  JGit으로 무엇을 할 수 있는지 보여주는 예제가 많다.
* StackOverflow에서도 도움이 되는 자료가 많다: http://stackoverflow.com/questions/6861881[]
